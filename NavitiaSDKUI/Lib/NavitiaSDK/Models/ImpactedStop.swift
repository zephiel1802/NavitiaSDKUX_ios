//
// ImpactedStop.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class ImpactedStop: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case amendedArrivalTime, stopPoint, stopTimeEffect, departureStatus, isDetour, amendedDepartureTime, baseArrivalTime, cause, baseDepartureTime, arrivalStatus, unknown
    }

    public enum StopTimeEffect: String, Codable { 
        case delayed = "delayed"
        case added = "added"
        case deleted = "deleted"
        case unchanged = "unchanged"
    }
    public var amendedArrivalTime: String?
    public var stopPoint: StopPoint?
    public var stopTimeEffect: StopTimeEffect?
    public var departureStatus: String?
    public var isDetour: Bool?
    public var amendedDepartureTime: String?
    public var baseArrivalTime: String?
    public var cause: String?
    public var baseDepartureTime: String?
    public var arrivalStatus: String?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        amendedArrivalTime = try container.decode(String.self, forKey: .amendedArrivalTime)
        stopPoint = try container.decode(StopPoint.self, forKey: .stopPoint)
        stopTimeEffect = try container.decode(StopTimeEffect.self, forKey: .stopTimeEffect)
        departureStatus = try container.decode(String.self, forKey: .departureStatus)
        isDetour = try container.decode(Bool.self, forKey: .isDetour)
        amendedDepartureTime = try container.decode(String.self, forKey: .amendedDepartureTime)
        baseArrivalTime = try container.decode(String.self, forKey: .baseArrivalTime)
        cause = try container.decode(String.self, forKey: .cause)
        baseDepartureTime = try container.decode(String.self, forKey: .baseDepartureTime)
        arrivalStatus = try container.decode(String.self, forKey: .arrivalStatus)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(amendedArrivalTime, forKey: .amendedArrivalTime)
        try container.encode(stopPoint, forKey: .stopPoint)
        try container.encode(stopTimeEffect, forKey: .stopTimeEffect)
        try container.encode(departureStatus, forKey: .departureStatus)
        try container.encode(isDetour, forKey: .isDetour)
        try container.encode(amendedDepartureTime, forKey: .amendedDepartureTime)
        try container.encode(baseArrivalTime, forKey: .baseArrivalTime)
        try container.encode(cause, forKey: .cause)
        try container.encode(baseDepartureTime, forKey: .baseDepartureTime)
        try container.encode(arrivalStatus, forKey: .arrivalStatus)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        amendedArrivalTime <- map["amended_arrival_time"]
        stopPoint <- map["stop_point"]
        stopTimeEffect <- map["stop_time_effect"]
        departureStatus <- map["departure_status"]
        isDetour <- map["is_detour"]
        amendedDepartureTime <- map["amended_departure_time"]
        baseArrivalTime <- map["base_arrival_time"]
        cause <- map["cause"]
        baseDepartureTime <- map["base_departure_time"]
        arrivalStatus <- map["arrival_status"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["amended_arrival_time"] = self.amendedArrivalTime
        nillableDictionary["stop_point"] = self.stopPoint?.encodeToJSON()
        nillableDictionary["stop_time_effect"] = self.stopTimeEffect?.rawValue
        nillableDictionary["departure_status"] = self.departureStatus
        nillableDictionary["is_detour"] = self.isDetour
        nillableDictionary["amended_departure_time"] = self.amendedDepartureTime
        nillableDictionary["base_arrival_time"] = self.baseArrivalTime
        nillableDictionary["cause"] = self.cause
        nillableDictionary["base_departure_time"] = self.baseDepartureTime
        nillableDictionary["arrival_status"] = self.arrivalStatus

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
