//
// JourneyPattern.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class JourneyPattern: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case route, journeyPatternPoints, name, id, unknown
    }

    public var route: Route?
    public var journeyPatternPoints: [JourneyPatternPoint]?
    /** Name of the object */
    public var name: String?
    /** Identifier of the object */
    public var id: String?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        route = try container.decode(Route.self, forKey: .route)
        journeyPatternPoints = try container.decode([JourneyPatternPoint].self, forKey: .journeyPatternPoints)
        name = try container.decode(String.self, forKey: .name)
        id = try container.decode(String.self, forKey: .id)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(route, forKey: .route)
        try container.encode(journeyPatternPoints, forKey: .journeyPatternPoints)
        try container.encode(name, forKey: .name)
        try container.encode(id, forKey: .id)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        route <- map["route"]
        journeyPatternPoints <- map["journey_pattern_points"]
        name <- map["name"]
        id <- map["id"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["route"] = self.route?.encodeToJSON()
        nillableDictionary["journey_pattern_points"] = self.journeyPatternPoints?.encodeToJSON()
        nillableDictionary["name"] = self.name
        nillableDictionary["id"] = self.id

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
