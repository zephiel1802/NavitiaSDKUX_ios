//
// Line.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class Line: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case comment, properties, code, network, links, color, routes, geojson, textColor, physicalModes, codes, comments, closingTime, openingTime, commercialMode, id, lineGroups, name, unknown
    }

    public var comment: String?
    public var properties: [Property]?
    public var code: String?
    public var network: Network?
    public var links: [LinkSchema]?
    public var color: String?
    public var routes: [Route]?
    public var geojson: MultiLineStringSchema?
    public var textColor: String?
    public var physicalModes: [PhysicalMode]?
    public var codes: [Code]?
    public var comments: [Comment]?
    public var closingTime: String?
    public var openingTime: String?
    public var commercialMode: CommercialMode?
    /** Identifier of the object */
    public var id: String?
    public var lineGroups: [LineGroup]?
    /** Name of the object */
    public var name: String?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        comment = try container.decode(String.self, forKey: .comment)
        properties = try container.decode([Property].self, forKey: .properties)
        code = try container.decode(String.self, forKey: .code)
        network = try container.decode(Network.self, forKey: .network)
        links = try container.decode([LinkSchema].self, forKey: .links)
        color = try container.decode(String.self, forKey: .color)
        routes = try container.decode([Route].self, forKey: .routes)
        geojson = try container.decode(MultiLineStringSchema.self, forKey: .geojson)
        textColor = try container.decode(String.self, forKey: .textColor)
        physicalModes = try container.decode([PhysicalMode].self, forKey: .physicalModes)
        codes = try container.decode([Code].self, forKey: .codes)
        comments = try container.decode([Comment].self, forKey: .comments)
        closingTime = try container.decode(String.self, forKey: .closingTime)
        openingTime = try container.decode(String.self, forKey: .openingTime)
        commercialMode = try container.decode(CommercialMode.self, forKey: .commercialMode)
        id = try container.decode(String.self, forKey: .id)
        lineGroups = try container.decode([LineGroup].self, forKey: .lineGroups)
        name = try container.decode(String.self, forKey: .name)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(comment, forKey: .comment)
        try container.encode(properties, forKey: .properties)
        try container.encode(code, forKey: .code)
        try container.encode(network, forKey: .network)
        try container.encode(links, forKey: .links)
        try container.encode(color, forKey: .color)
        try container.encode(routes, forKey: .routes)
        try container.encode(geojson, forKey: .geojson)
        try container.encode(textColor, forKey: .textColor)
        try container.encode(physicalModes, forKey: .physicalModes)
        try container.encode(codes, forKey: .codes)
        try container.encode(comments, forKey: .comments)
        try container.encode(closingTime, forKey: .closingTime)
        try container.encode(openingTime, forKey: .openingTime)
        try container.encode(commercialMode, forKey: .commercialMode)
        try container.encode(id, forKey: .id)
        try container.encode(lineGroups, forKey: .lineGroups)
        try container.encode(name, forKey: .name)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        comment <- map["comment"]
        properties <- map["properties"]
        code <- map["code"]
        network <- map["network"]
        links <- map["links"]
        color <- map["color"]
        routes <- map["routes"]
        geojson <- map["geojson"]
        textColor <- map["text_color"]
        physicalModes <- map["physical_modes"]
        codes <- map["codes"]
        comments <- map["comments"]
        closingTime <- map["closing_time"]
        openingTime <- map["opening_time"]
        commercialMode <- map["commercial_mode"]
        id <- map["id"]
        lineGroups <- map["line_groups"]
        name <- map["name"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["comment"] = self.comment
        nillableDictionary["properties"] = self.properties?.encodeToJSON()
        nillableDictionary["code"] = self.code
        nillableDictionary["network"] = self.network?.encodeToJSON()
        nillableDictionary["links"] = self.links?.encodeToJSON()
        nillableDictionary["color"] = self.color
        nillableDictionary["routes"] = self.routes?.encodeToJSON()
        nillableDictionary["geojson"] = self.geojson?.encodeToJSON()
        nillableDictionary["text_color"] = self.textColor
        nillableDictionary["physical_modes"] = self.physicalModes?.encodeToJSON()
        nillableDictionary["codes"] = self.codes?.encodeToJSON()
        nillableDictionary["comments"] = self.comments?.encodeToJSON()
        nillableDictionary["closing_time"] = self.closingTime
        nillableDictionary["opening_time"] = self.openingTime
        nillableDictionary["commercial_mode"] = self.commercialMode?.encodeToJSON()
        nillableDictionary["id"] = self.id
        nillableDictionary["line_groups"] = self.lineGroups?.encodeToJSON()
        nillableDictionary["name"] = self.name

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
