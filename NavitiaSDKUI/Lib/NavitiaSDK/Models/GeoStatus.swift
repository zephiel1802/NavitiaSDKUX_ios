//
// GeoStatus.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class GeoStatus: JSONEncodable, Mappable, Codable {

    public var nbAdminsFromCities: Int32?
    public var streetNetworkSources: [String]?
    public var poiSources: [String]?
    public var nbAddresses: Int32?
    public var nbAdmins: Int32?
    public var nbPois: Int32?
    public var nbWays: Int32?

    public init() {}
    required public init?(map: Map) {

    }


    enum CodingKeys: String, CodingKey {
        case nbAdminsFromCities = "nb_admins_from_cities"
        case streetNetworkSources = "street_network_sources"
        case poiSources = "poi_sources"
        case nbAddresses = "nb_addresses"
        case nbAdmins = "nb_admins"
        case nbPois = "nb_pois"
        case nbWays = "nb_ways"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(nbAdminsFromCities, forKey: .nbAdminsFromCities)
        try container.encode(streetNetworkSources, forKey: .streetNetworkSources)
        try container.encode(poiSources, forKey: .poiSources)
        try container.encode(nbAddresses, forKey: .nbAddresses)
        try container.encode(nbAdmins, forKey: .nbAdmins)
        try container.encode(nbPois, forKey: .nbPois)
        try container.encode(nbWays, forKey: .nbWays)
    }

    public func mapping(map: Map) {
        nbAdminsFromCities <- map["nb_admins_from_cities"]
        streetNetworkSources <- map["street_network_sources"]
        poiSources <- map["poi_sources"]
        nbAddresses <- map["nb_addresses"]
        nbAdmins <- map["nb_admins"]
        nbPois <- map["nb_pois"]
        nbWays <- map["nb_ways"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["nb_admins_from_cities"] = self.nbAdminsFromCities?.encodeToJSON()
        nillableDictionary["street_network_sources"] = self.streetNetworkSources?.encodeToJSON()
        nillableDictionary["poi_sources"] = self.poiSources?.encodeToJSON()
        nillableDictionary["nb_addresses"] = self.nbAddresses?.encodeToJSON()
        nillableDictionary["nb_admins"] = self.nbAdmins?.encodeToJSON()
        nillableDictionary["nb_pois"] = self.nbPois?.encodeToJSON()
        nillableDictionary["nb_ways"] = self.nbWays?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
