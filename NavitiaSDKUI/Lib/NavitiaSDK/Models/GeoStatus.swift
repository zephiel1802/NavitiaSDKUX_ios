//
// GeoStatus.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class GeoStatus: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case nbAdminsFromCities, streetNetworkSources, poiSources, nbAddresses, nbAdmins, nbPois, nbWays, unknown
    }

    public var nbAdminsFromCities: Int32?
    public var streetNetworkSources: [String]?
    public var poiSources: [String]?
    public var nbAddresses: Int32?
    public var nbAdmins: Int32?
    public var nbPois: Int32?
    public var nbWays: Int32?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        nbAdminsFromCities = try container.decode(Int32.self, forKey: .nbAdminsFromCities)
        streetNetworkSources = try container.decode([String].self, forKey: .streetNetworkSources)
        poiSources = try container.decode([String].self, forKey: .poiSources)
        nbAddresses = try container.decode(Int32.self, forKey: .nbAddresses)
        nbAdmins = try container.decode(Int32.self, forKey: .nbAdmins)
        nbPois = try container.decode(Int32.self, forKey: .nbPois)
        nbWays = try container.decode(Int32.self, forKey: .nbWays)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(nbAdminsFromCities, forKey: .nbAdminsFromCities)
        try container.encode(streetNetworkSources, forKey: .streetNetworkSources)
        try container.encode(poiSources, forKey: .poiSources)
        try container.encode(nbAddresses, forKey: .nbAddresses)
        try container.encode(nbAdmins, forKey: .nbAdmins)
        try container.encode(nbPois, forKey: .nbPois)
        try container.encode(nbWays, forKey: .nbWays)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        nbAdminsFromCities <- map["nb_admins_from_cities"]
        streetNetworkSources <- map["street_network_sources"]
        poiSources <- map["poi_sources"]
        nbAddresses <- map["nb_addresses"]
        nbAdmins <- map["nb_admins"]
        nbPois <- map["nb_pois"]
        nbWays <- map["nb_ways"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["nb_admins_from_cities"] = self.nbAdminsFromCities?.encodeToJSON()
        nillableDictionary["street_network_sources"] = self.streetNetworkSources?.encodeToJSON()
        nillableDictionary["poi_sources"] = self.poiSources?.encodeToJSON()
        nillableDictionary["nb_addresses"] = self.nbAddresses?.encodeToJSON()
        nillableDictionary["nb_admins"] = self.nbAdmins?.encodeToJSON()
        nillableDictionary["nb_pois"] = self.nbPois?.encodeToJSON()
        nillableDictionary["nb_ways"] = self.nbWays?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
