//
// WeekPattern.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class WeekPattern: JSONEncodable, Mappable, Codable {

    public var monday: Bool?
    public var tuesday: Bool?
    public var friday: Bool?
    public var wednesday: Bool?
    public var thursday: Bool?
    public var sunday: Bool?
    public var saturday: Bool?

    public init() {}
    required public init?(map: Map) {

    }


    enum CodingKeys: String, CodingKey {
        case monday = "monday"
        case tuesday = "tuesday"
        case friday = "friday"
        case wednesday = "wednesday"
        case thursday = "thursday"
        case sunday = "sunday"
        case saturday = "saturday"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(monday, forKey: .monday)
        try container.encode(tuesday, forKey: .tuesday)
        try container.encode(friday, forKey: .friday)
        try container.encode(wednesday, forKey: .wednesday)
        try container.encode(thursday, forKey: .thursday)
        try container.encode(sunday, forKey: .sunday)
        try container.encode(saturday, forKey: .saturday)
    }

    public func mapping(map: Map) {
        monday <- map["monday"]
        tuesday <- map["tuesday"]
        friday <- map["friday"]
        wednesday <- map["wednesday"]
        thursday <- map["thursday"]
        sunday <- map["sunday"]
        saturday <- map["saturday"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["monday"] = self.monday
        nillableDictionary["tuesday"] = self.tuesday
        nillableDictionary["friday"] = self.friday
        nillableDictionary["wednesday"] = self.wednesday
        nillableDictionary["thursday"] = self.thursday
        nillableDictionary["sunday"] = self.sunday
        nillableDictionary["saturday"] = self.saturday

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
