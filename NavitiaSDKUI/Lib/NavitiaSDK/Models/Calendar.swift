//
// Calendar.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class Calendar: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case activePeriods, name, validityPattern, exceptions, weekPattern, id, unknown
    }

    public var activePeriods: [CalendarPeriod]?
    /** Name of the object */
    public var name: String?
    public var validityPattern: ValidityPattern?
    public var exceptions: [CalendarException]?
    public var weekPattern: WeekPattern?
    /** Identifier of the object */
    public var id: String?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        activePeriods = try container.decode([CalendarPeriod].self, forKey: .activePeriods)
        name = try container.decode(String.self, forKey: .name)
        validityPattern = try container.decode(ValidityPattern.self, forKey: .validityPattern)
        exceptions = try container.decode([CalendarException].self, forKey: .exceptions)
        weekPattern = try container.decode(WeekPattern.self, forKey: .weekPattern)
        id = try container.decode(String.self, forKey: .id)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(activePeriods, forKey: .activePeriods)
        try container.encode(name, forKey: .name)
        try container.encode(validityPattern, forKey: .validityPattern)
        try container.encode(exceptions, forKey: .exceptions)
        try container.encode(weekPattern, forKey: .weekPattern)
        try container.encode(id, forKey: .id)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        activePeriods <- map["active_periods"]
        name <- map["name"]
        validityPattern <- map["validity_pattern"]
        exceptions <- map["exceptions"]
        weekPattern <- map["week_pattern"]
        id <- map["id"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["active_periods"] = self.activePeriods?.encodeToJSON()
        nillableDictionary["name"] = self.name
        nillableDictionary["validity_pattern"] = self.validityPattern?.encodeToJSON()
        nillableDictionary["exceptions"] = self.exceptions?.encodeToJSON()
        nillableDictionary["week_pattern"] = self.weekPattern?.encodeToJSON()
        nillableDictionary["id"] = self.id

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
