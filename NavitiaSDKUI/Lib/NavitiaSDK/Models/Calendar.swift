//
// Calendar.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class Calendar: JSONEncodable, Mappable, Codable {

    public var activePeriods: [CalendarPeriod]?
    /** Name of the object */
    public var name: String?
    public var validityPattern: ValidityPattern?
    public var exceptions: [CalendarException]?
    public var weekPattern: WeekPattern?
    /** Identifier of the object */
    public var id: String?


    public init() {}
    required public init?(map: Map) {

    }


    enum CodingKeys: String, CodingKey {
        case activePeriods = "active_periods"
        case name = "name"
        case validityPattern = "validity_pattern"
        case exceptions = "exceptions"
        case weekPattern = "week_pattern"
        case id = "id"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(activePeriods, forKey: .activePeriods)
        try container.encode(name, forKey: .name)
        try container.encode(validityPattern, forKey: .validityPattern)
        try container.encode(exceptions, forKey: .exceptions)
        try container.encode(weekPattern, forKey: .weekPattern)
        try container.encode(id, forKey: .id)
    }

    public func mapping(map: Map) {
        activePeriods <- map["active_periods"]
        name <- map["name"]
        validityPattern <- map["validity_pattern"]
        exceptions <- map["exceptions"]
        weekPattern <- map["week_pattern"]
        id <- map["id"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["active_periods"] = self.activePeriods?.encodeToJSON()
        nillableDictionary["name"] = self.name
        nillableDictionary["validity_pattern"] = self.validityPattern?.encodeToJSON()
        nillableDictionary["exceptions"] = self.exceptions?.encodeToJSON()
        nillableDictionary["week_pattern"] = self.weekPattern?.encodeToJSON()
        nillableDictionary["id"] = self.id

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
