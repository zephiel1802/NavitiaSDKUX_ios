//
// JourneyDebug.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class JourneyDebug: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case nbVjExtentions, nbSections, internalId, streetnetworkDuration, transferDuration, minWaitingDuration, unknown
    }

    /** Number of stay-in */
    public var nbVjExtentions: Int32?
    /** Number of sections */
    public var nbSections: Int32?
    public var internalId: String?
    /** Total duration of streetnetwork use (seconds) */
    public var streetnetworkDuration: Int32?
    /** Total duration of transfers (seconds) */
    public var transferDuration: Int32?
    /** Minimum on all waiting durations (seconds) */
    public var minWaitingDuration: Int32?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        nbVjExtentions = try container.decode(Int32.self, forKey: .nbVjExtentions)
        nbSections = try container.decode(Int32.self, forKey: .nbSections)
        internalId = try container.decode(String.self, forKey: .internalId)
        streetnetworkDuration = try container.decode(Int32.self, forKey: .streetnetworkDuration)
        transferDuration = try container.decode(Int32.self, forKey: .transferDuration)
        minWaitingDuration = try container.decode(Int32.self, forKey: .minWaitingDuration)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(nbVjExtentions, forKey: .nbVjExtentions)
        try container.encode(nbSections, forKey: .nbSections)
        try container.encode(internalId, forKey: .internalId)
        try container.encode(streetnetworkDuration, forKey: .streetnetworkDuration)
        try container.encode(transferDuration, forKey: .transferDuration)
        try container.encode(minWaitingDuration, forKey: .minWaitingDuration)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        nbVjExtentions <- map["nb_vj_extentions"]
        nbSections <- map["nb_sections"]
        internalId <- map["internal_id"]
        streetnetworkDuration <- map["streetnetwork_duration"]
        transferDuration <- map["transfer_duration"]
        minWaitingDuration <- map["min_waiting_duration"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["nb_vj_extentions"] = self.nbVjExtentions?.encodeToJSON()
        nillableDictionary["nb_sections"] = self.nbSections?.encodeToJSON()
        nillableDictionary["internal_id"] = self.internalId
        nillableDictionary["streetnetwork_duration"] = self.streetnetworkDuration?.encodeToJSON()
        nillableDictionary["transfer_duration"] = self.transferDuration?.encodeToJSON()
        nillableDictionary["min_waiting_duration"] = self.minWaitingDuration?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
