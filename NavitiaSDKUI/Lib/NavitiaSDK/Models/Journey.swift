//
// Journey.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class Journey: JSONEncodable, Mappable, Codable {

    /** Status from the whole journey taking into account the most disturbing information retrieved on every object used (can be \&quot;NO_SERVICE\&quot;, \&quot;SIGNIFICANT_DELAYS\&quot;, ... */
    public var status: String?
    public var distances: Distances?
    public var from: Place?
    public var links: [LinkSchema]?
    public var tags: [String]?
    /** Number of transfers along the journey */
    public var nbTransfers: Int32?
    public var durations: Durations?
    /** Arrival date and time of the journey */
    public var arrivalDateTime: String?
    public var calendars: [Calendar]?
    /** Departure date and time of the journey */
    public var departureDateTime: String?
    public var to: Place?
    public var requestedDateTime: String?
    public var fare: Fare?
    public var co2Emission: Amount?
    /** Used to qualify the journey (can be \&quot;best\&quot;, \&quot;comfort\&quot;, \&quot;non_pt_walk\&quot;, ... */
    public var type: String?
    /** Duration of the journey (seconds) */
    public var duration: Int32?
    public var sections: [Section]?
    public var debug: JourneyDebug?

    public init() {}
    required public init?(map: Map) {

    }


    enum CodingKeys: String, CodingKey {
        case status = "status"
        case distances = "distances"
        case from = "from"
        case links = "links"
        case tags = "tags"
        case nbTransfers = "nb_transfers"
        case durations = "durations"
        case arrivalDateTime = "arrival_date_time"
        case calendars = "calendars"
        case departureDateTime = "departure_date_time"
        case to = "to"
        case requestedDateTime = "requested_date_time"
        case fare = "fare"
        case co2Emission = "co2_emission"
        case type = "type"
        case duration = "duration"
        case sections = "sections"
        case debug = "debug"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(status, forKey: .status)
        try container.encode(distances, forKey: .distances)
        try container.encode(from, forKey: .from)
        try container.encode(links, forKey: .links)
        try container.encode(tags, forKey: .tags)
        try container.encode(nbTransfers, forKey: .nbTransfers)
        try container.encode(durations, forKey: .durations)
        try container.encode(arrivalDateTime, forKey: .arrivalDateTime)
        try container.encode(calendars, forKey: .calendars)
        try container.encode(departureDateTime, forKey: .departureDateTime)
        try container.encode(to, forKey: .to)
        try container.encode(requestedDateTime, forKey: .requestedDateTime)
        try container.encode(fare, forKey: .fare)
        try container.encode(co2Emission, forKey: .co2Emission)
        try container.encode(type, forKey: .type)
        try container.encode(duration, forKey: .duration)
        try container.encode(sections, forKey: .sections)
        try container.encode(debug, forKey: .debug)
    }

    public func mapping(map: Map) {
        status <- map["status"]
        distances <- map["distances"]
        from <- map["from"]
        links <- map["links"]
        tags <- map["tags"]
        nbTransfers <- map["nb_transfers"]
        durations <- map["durations"]
        arrivalDateTime <- map["arrival_date_time"]
        calendars <- map["calendars"]
        departureDateTime <- map["departure_date_time"]
        to <- map["to"]
        requestedDateTime <- map["requested_date_time"]
        fare <- map["fare"]
        co2Emission <- map["co2_emission"]
        type <- map["type"]
        duration <- map["duration"]
        sections <- map["sections"]
        debug <- map["debug"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["status"] = self.status
        nillableDictionary["distances"] = self.distances?.encodeToJSON()
        nillableDictionary["from"] = self.from?.encodeToJSON()
        nillableDictionary["links"] = self.links?.encodeToJSON()
        nillableDictionary["tags"] = self.tags?.encodeToJSON()
        nillableDictionary["nb_transfers"] = self.nbTransfers?.encodeToJSON()
        nillableDictionary["durations"] = self.durations?.encodeToJSON()
        nillableDictionary["arrival_date_time"] = self.arrivalDateTime
        nillableDictionary["calendars"] = self.calendars?.encodeToJSON()
        nillableDictionary["departure_date_time"] = self.departureDateTime
        nillableDictionary["to"] = self.to?.encodeToJSON()
        nillableDictionary["requested_date_time"] = self.requestedDateTime
        nillableDictionary["fare"] = self.fare?.encodeToJSON()
        nillableDictionary["co2_emission"] = self.co2Emission?.encodeToJSON()
        nillableDictionary["type"] = self.type
        nillableDictionary["duration"] = self.duration?.encodeToJSON()
        nillableDictionary["sections"] = self.sections?.encodeToJSON()
        nillableDictionary["debug"] = self.debug?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
