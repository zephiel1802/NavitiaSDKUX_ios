//
// Journey.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class Journey: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case status, distances, from, links, tags, nbTransfers, durations, arrivalDateTime, calendars, departureDateTime, to, requestedDateTime, fare, co2Emission, type, duration, sections, debug, unknown
    }

    /** Status from the whole journey taking into account the most disturbing information retrieved on every object used (can be \&quot;NO_SERVICE\&quot;, \&quot;SIGNIFICANT_DELAYS\&quot;, ... */
    public var status: String?
    public var distances: Distances?
    public var from: Place?
    public var links: [LinkSchema]?
    public var tags: [String]?
    /** Number of transfers along the journey */
    public var nbTransfers: Int32?
    public var durations: Durations?
    /** Arrival date and time of the journey */
    public var arrivalDateTime: String?
    public var calendars: [Calendar]?
    /** Departure date and time of the journey */
    public var departureDateTime: String?
    public var to: Place?
    public var requestedDateTime: String?
    public var fare: Fare?
    public var co2Emission: Amount?
    /** Used to qualify the journey (can be \&quot;best\&quot;, \&quot;comfort\&quot;, \&quot;non_pt_walk\&quot;, ... */
    public var type: String?
    /** Duration of the journey (seconds) */
    public var duration: Int32?
    public var sections: [Section]?
    public var debug: JourneyDebug?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        status = try container.decode(String.self, forKey: .status)
        distances = try container.decode(Distances.self, forKey: .distances)
        from = try container.decode(Place.self, forKey: .from)
        links = try container.decode([LinkSchema].self, forKey: .links)
        tags = try container.decode([String].self, forKey: .tags)
        nbTransfers = try container.decode(Int32.self, forKey: .nbTransfers)
        durations = try container.decode(Durations.self, forKey: .durations)
        arrivalDateTime = try container.decode(String.self, forKey: .arrivalDateTime)
        calendars = try container.decode([Calendar].self, forKey: .calendars)
        departureDateTime = try container.decode(String.self, forKey: .departureDateTime)
        to = try container.decode(Place.self, forKey: .to)
        requestedDateTime = try container.decode(String.self, forKey: .requestedDateTime)
        fare = try container.decode(Fare.self, forKey: .fare)
        co2Emission = try container.decode(Amount.self, forKey: .co2Emission)
        type = try container.decode(String.self, forKey: .type)
        duration = try container.decode(Int32.self, forKey: .duration)
        sections = try container.decode([Section].self, forKey: .sections)
        debug = try container.decode(JourneyDebug.self, forKey: .debug)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(status, forKey: .status)
        try container.encode(distances, forKey: .distances)
        try container.encode(from, forKey: .from)
        try container.encode(links, forKey: .links)
        try container.encode(tags, forKey: .tags)
        try container.encode(nbTransfers, forKey: .nbTransfers)
        try container.encode(durations, forKey: .durations)
        try container.encode(arrivalDateTime, forKey: .arrivalDateTime)
        try container.encode(calendars, forKey: .calendars)
        try container.encode(departureDateTime, forKey: .departureDateTime)
        try container.encode(to, forKey: .to)
        try container.encode(requestedDateTime, forKey: .requestedDateTime)
        try container.encode(fare, forKey: .fare)
        try container.encode(co2Emission, forKey: .co2Emission)
        try container.encode(type, forKey: .type)
        try container.encode(duration, forKey: .duration)
        try container.encode(sections, forKey: .sections)
        try container.encode(debug, forKey: .debug)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        status <- map["status"]
        distances <- map["distances"]
        from <- map["from"]
        links <- map["links"]
        tags <- map["tags"]
        nbTransfers <- map["nb_transfers"]
        durations <- map["durations"]
        arrivalDateTime <- map["arrival_date_time"]
        calendars <- map["calendars"]
        departureDateTime <- map["departure_date_time"]
        to <- map["to"]
        requestedDateTime <- map["requested_date_time"]
        fare <- map["fare"]
        co2Emission <- map["co2_emission"]
        type <- map["type"]
        duration <- map["duration"]
        sections <- map["sections"]
        debug <- map["debug"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["status"] = self.status
        nillableDictionary["distances"] = self.distances?.encodeToJSON()
        nillableDictionary["from"] = self.from?.encodeToJSON()
        nillableDictionary["links"] = self.links?.encodeToJSON()
        nillableDictionary["tags"] = self.tags?.encodeToJSON()
        nillableDictionary["nb_transfers"] = self.nbTransfers?.encodeToJSON()
        nillableDictionary["durations"] = self.durations?.encodeToJSON()
        nillableDictionary["arrival_date_time"] = self.arrivalDateTime
        nillableDictionary["calendars"] = self.calendars?.encodeToJSON()
        nillableDictionary["departure_date_time"] = self.departureDateTime
        nillableDictionary["to"] = self.to?.encodeToJSON()
        nillableDictionary["requested_date_time"] = self.requestedDateTime
        nillableDictionary["fare"] = self.fare?.encodeToJSON()
        nillableDictionary["co2_emission"] = self.co2Emission?.encodeToJSON()
        nillableDictionary["type"] = self.type
        nillableDictionary["duration"] = self.duration?.encodeToJSON()
        nillableDictionary["sections"] = self.sections?.encodeToJSON()
        nillableDictionary["debug"] = self.debug?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
