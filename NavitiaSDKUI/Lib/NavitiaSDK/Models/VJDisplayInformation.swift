//
// VJDisplayInformation.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class VJDisplayInformation: JSONEncodable, Mappable, Codable {

    public enum Equipments: String, Codable { 
        case wheelchairAccessibility = "has_wheelchair_accessibility"
        case bikeAccepted = "has_bike_accepted"
        case airConditioned = "has_air_conditioned"
        case visualAnnouncement = "has_visual_announcement"
        case audibleAnnouncement = "has_audible_announcement"
        case appropriateEscort = "has_appropriate_escort"
        case appropriateSignage = "has_appropriate_signage"
        case schoolVehicle = "has_school_vehicle"
        case wheelchairBoarding = "has_wheelchair_boarding"
        case sheltered = "has_sheltered"
        case elevator = "has_elevator"
        case escalator = "has_escalator"
        case bikeDepot = "has_bike_depot"
    }
    public var direction: String?
    public var code: String?
    public var network: String?
    public var links: [LinkSchema]?
    public var color: String?
    public var name: String?
    public var physicalMode: String?
    public var headsign: String?
    public var label: String?
    public var equipments: [Equipments]?
    public var textColor: String?
    public var headsigns: [String]?
    public var commercialMode: String?
    public var description: String?

    public init() {}
    required public init?(map: Map) {

    }


    enum CodingKeys: String, CodingKey {
        case direction = "direction"
        case code = "code"
        case network = "network"
        case links = "links"
        case color = "color"
        case name = "name"
        case physicalMode = "physical_mode"
        case headsign = "headsign"
        case label = "label"
        case equipments = "equipments"
        case textColor = "text_color"
        case headsigns = "headsigns"
        case commercialMode = "commercial_mode"
        case description = "description"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(direction, forKey: .direction)
        try container.encode(code, forKey: .code)
        try container.encode(network, forKey: .network)
        try container.encode(links, forKey: .links)
        try container.encode(color, forKey: .color)
        try container.encode(name, forKey: .name)
        try container.encode(physicalMode, forKey: .physicalMode)
        try container.encode(headsign, forKey: .headsign)
        try container.encode(label, forKey: .label)
        try container.encode(equipments, forKey: .equipments)
        try container.encode(textColor, forKey: .textColor)
        try container.encode(headsigns, forKey: .headsigns)
        try container.encode(commercialMode, forKey: .commercialMode)
        try container.encode(description, forKey: .description)
    }

    public func mapping(map: Map) {
        direction <- map["direction"]
        code <- map["code"]
        network <- map["network"]
        links <- map["links"]
        color <- map["color"]
        name <- map["name"]
        physicalMode <- map["physical_mode"]
        headsign <- map["headsign"]
        label <- map["label"]
        equipments <- map["equipments"]
        textColor <- map["text_color"]
        headsigns <- map["headsigns"]
        commercialMode <- map["commercial_mode"]
        description <- map["description"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["direction"] = self.direction
        nillableDictionary["code"] = self.code
        nillableDictionary["network"] = self.network
        nillableDictionary["links"] = self.links?.encodeToJSON()
        nillableDictionary["color"] = self.color
        nillableDictionary["name"] = self.name
        nillableDictionary["physical_mode"] = self.physicalMode
        nillableDictionary["headsign"] = self.headsign
        nillableDictionary["label"] = self.label
        nillableDictionary["equipments"] = self.equipments?.map({$0.rawValue}).encodeToJSON()
        nillableDictionary["text_color"] = self.textColor
        nillableDictionary["headsigns"] = self.headsigns?.encodeToJSON()
        nillableDictionary["commercial_mode"] = self.commercialMode
        nillableDictionary["description"] = self.description

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
