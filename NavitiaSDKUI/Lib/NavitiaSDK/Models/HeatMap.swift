//
// HeatMap.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class HeatMap: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case to, requestedDateTime, from, heatMatrix, unknown
    }

    public var to: Place?
    public var requestedDateTime: String?
    public var from: Place?
    public var heatMatrix: HeatMatrixSchema?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        to = try container.decode(Place.self, forKey: .to)
        requestedDateTime = try container.decode(String.self, forKey: .requestedDateTime)
        from = try container.decode(Place.self, forKey: .from)
        heatMatrix = try container.decode(HeatMatrixSchema.self, forKey: .heatMatrix)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(to, forKey: .to)
        try container.encode(requestedDateTime, forKey: .requestedDateTime)
        try container.encode(from, forKey: .from)
        try container.encode(heatMatrix, forKey: .heatMatrix)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        to <- map["to"]
        requestedDateTime <- map["requested_date_time"]
        from <- map["from"]
        heatMatrix <- map["heat_matrix"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["to"] = self.to?.encodeToJSON()
        nillableDictionary["requested_date_time"] = self.requestedDateTime
        nillableDictionary["from"] = self.from?.encodeToJSON()
        nillableDictionary["heat_matrix"] = self.heatMatrix?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
