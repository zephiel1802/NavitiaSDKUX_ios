//
// EquipmentReports.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class EquipmentReports: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case pagination, links, warnings, equipmentReports, notes, error, feedPublishers, context, disruptions, unknown
    }

    public var pagination: Pagination?
    public var links: [LinkSchema]?
    public var warnings: [BetaEndpoints]?
    public var equipmentReports: [EquipmentReport]?
    public var notes: [Note]?
    public var error: ModelError?
    public var feedPublishers: [FeedPublisher]?
    public var context: Context?
    public var disruptions: [Disruption]?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        pagination = try container.decode(Pagination.self, forKey: .pagination)
        links = try container.decode([LinkSchema].self, forKey: .links)
        warnings = try container.decode([BetaEndpoints].self, forKey: .warnings)
        equipmentReports = try container.decode([EquipmentReport].self, forKey: .equipmentReports)
        notes = try container.decode([Note].self, forKey: .notes)
        error = try container.decode(ModelError.self, forKey: .error)
        feedPublishers = try container.decode([FeedPublisher].self, forKey: .feedPublishers)
        context = try container.decode(Context.self, forKey: .context)
        disruptions = try container.decode([Disruption].self, forKey: .disruptions)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pagination, forKey: .pagination)
        try container.encode(links, forKey: .links)
        try container.encode(warnings, forKey: .warnings)
        try container.encode(equipmentReports, forKey: .equipmentReports)
        try container.encode(notes, forKey: .notes)
        try container.encode(error, forKey: .error)
        try container.encode(feedPublishers, forKey: .feedPublishers)
        try container.encode(context, forKey: .context)
        try container.encode(disruptions, forKey: .disruptions)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        pagination <- map["pagination"]
        links <- map["links"]
        warnings <- map["warnings"]
        equipmentReports <- map["equipment_reports"]
        notes <- map["notes"]
        error <- map["error"]
        feedPublishers <- map["feed_publishers"]
        context <- map["context"]
        disruptions <- map["disruptions"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["pagination"] = self.pagination?.encodeToJSON()
        nillableDictionary["links"] = self.links?.encodeToJSON()
        nillableDictionary["warnings"] = self.warnings?.encodeToJSON()
        nillableDictionary["equipment_reports"] = self.equipmentReports?.encodeToJSON()
        nillableDictionary["notes"] = self.notes?.encodeToJSON()
        nillableDictionary["error"] = self.error?.encodeToJSON()
        nillableDictionary["feed_publishers"] = self.feedPublishers?.encodeToJSON()
        nillableDictionary["context"] = self.context?.encodeToJSON()
        nillableDictionary["disruptions"] = self.disruptions?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
