//
// PtObject.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class PtObject: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case embeddedType, stopPoint, name, route, stopArea, commercialMode, id, line, quality, trip, network, unknown
    }

    public enum EmbeddedType: String, Codable { 
        case line = "line"
        case journeyPattern = "journey_pattern"
        case vehicleJourney = "vehicle_journey"
        case stopPoint = "stop_point"
        case stopArea = "stop_area"
        case network = "network"
        case physicalMode = "physical_mode"
        case commercialMode = "commercial_mode"
        case connection = "connection"
        case journeyPatternPoint = "journey_pattern_point"
        case company = "company"
        case route = "route"
        case poi = "poi"
        case contributor = "contributor"
        case address = "address"
        case poitype = "poitype"
        case administrativeRegion = "administrative_region"
        case calendar = "calendar"
        case lineGroup = "line_group"
        case impact = "impact"
        case dataset = "dataset"
        case trip = "trip"
    }
    public var embeddedType: EmbeddedType?
    public var stopPoint: StopPoint?
    /** Name of the object */
    public var name: String?
    public var route: Route?
    public var stopArea: StopArea?
    public var commercialMode: CommercialMode?
    /** Identifier of the object */
    public var id: String?
    public var line: Line?
    public var quality: Int32?
    public var trip: Trip?
    public var network: Network?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        embeddedType = try container.decode(EmbeddedType.self, forKey: .embeddedType)
        stopPoint = try container.decode(StopPoint.self, forKey: .stopPoint)
        name = try container.decode(String.self, forKey: .name)
        route = try container.decode(Route.self, forKey: .route)
        stopArea = try container.decode(StopArea.self, forKey: .stopArea)
        commercialMode = try container.decode(CommercialMode.self, forKey: .commercialMode)
        id = try container.decode(String.self, forKey: .id)
        line = try container.decode(Line.self, forKey: .line)
        quality = try container.decode(Int32.self, forKey: .quality)
        trip = try container.decode(Trip.self, forKey: .trip)
        network = try container.decode(Network.self, forKey: .network)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(embeddedType, forKey: .embeddedType)
        try container.encode(stopPoint, forKey: .stopPoint)
        try container.encode(name, forKey: .name)
        try container.encode(route, forKey: .route)
        try container.encode(stopArea, forKey: .stopArea)
        try container.encode(commercialMode, forKey: .commercialMode)
        try container.encode(id, forKey: .id)
        try container.encode(line, forKey: .line)
        try container.encode(quality, forKey: .quality)
        try container.encode(trip, forKey: .trip)
        try container.encode(network, forKey: .network)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        embeddedType <- map["embedded_type"]
        stopPoint <- map["stop_point"]
        name <- map["name"]
        route <- map["route"]
        stopArea <- map["stop_area"]
        commercialMode <- map["commercial_mode"]
        id <- map["id"]
        line <- map["line"]
        quality <- map["quality"]
        trip <- map["trip"]
        network <- map["network"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["embedded_type"] = self.embeddedType?.rawValue
        nillableDictionary["stop_point"] = self.stopPoint?.encodeToJSON()
        nillableDictionary["name"] = self.name
        nillableDictionary["route"] = self.route?.encodeToJSON()
        nillableDictionary["stop_area"] = self.stopArea?.encodeToJSON()
        nillableDictionary["commercial_mode"] = self.commercialMode?.encodeToJSON()
        nillableDictionary["id"] = self.id
        nillableDictionary["line"] = self.line?.encodeToJSON()
        nillableDictionary["quality"] = self.quality?.encodeToJSON()
        nillableDictionary["trip"] = self.trip?.encodeToJSON()
        nillableDictionary["network"] = self.network?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
