//
// Admin.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class Admin: JSONEncodable, Mappable, Codable {

    public var insee: String?
    /** Name of the object */
    public var name: String?
    public var level: Int32?
    public var coord: Coord?
    public var label: String?
    /** Identifier of the object */
    public var id: String?
    public var zipCode: String?


    public init() {}
    required public init?(map: Map) {

    }


    enum CodingKeys: String, CodingKey {
        case insee = "insee"
        case name = "name"
        case level = "level"
        case coord = "coord"
        case label = "label"
        case id = "id"
        case zipCode = "zip_code"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(insee, forKey: .insee)
        try container.encode(name, forKey: .name)
        try container.encode(level, forKey: .level)
        try container.encode(coord, forKey: .coord)
        try container.encode(label, forKey: .label)
        try container.encode(id, forKey: .id)
        try container.encode(zipCode, forKey: .zipCode)
    }

    public func mapping(map: Map) {
        insee <- map["insee"]
        name <- map["name"]
        level <- map["level"]
        coord <- map["coord"]
        label <- map["label"]
        id <- map["id"]
        zipCode <- map["zip_code"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["insee"] = self.insee
        nillableDictionary["name"] = self.name
        nillableDictionary["level"] = self.level?.encodeToJSON()
        nillableDictionary["coord"] = self.coord?.encodeToJSON()
        nillableDictionary["label"] = self.label
        nillableDictionary["id"] = self.id
        nillableDictionary["zip_code"] = self.zipCode

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
