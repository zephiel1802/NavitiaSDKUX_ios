//
// CarPark.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class CarPark: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case available, totalPlaces, occupiedPRM, occupied, availablePRM, unknown
    }

    public var available: Int32?
    public var totalPlaces: Int32?
    public var occupiedPRM: Int32?
    public var occupied: Int32?
    public var availablePRM: Int32?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        available = try container.decode(Int32.self, forKey: .available)
        totalPlaces = try container.decode(Int32.self, forKey: .totalPlaces)
        occupiedPRM = try container.decode(Int32.self, forKey: .occupiedPRM)
        occupied = try container.decode(Int32.self, forKey: .occupied)
        availablePRM = try container.decode(Int32.self, forKey: .availablePRM)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(available, forKey: .available)
        try container.encode(totalPlaces, forKey: .totalPlaces)
        try container.encode(occupiedPRM, forKey: .occupiedPRM)
        try container.encode(occupied, forKey: .occupied)
        try container.encode(availablePRM, forKey: .availablePRM)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        available <- map["available"]
        totalPlaces <- map["total_places"]
        occupiedPRM <- map["occupied_PRM"]
        occupied <- map["occupied"]
        availablePRM <- map["available_PRM"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["available"] = self.available?.encodeToJSON()
        nillableDictionary["total_places"] = self.totalPlaces?.encodeToJSON()
        nillableDictionary["occupied_PRM"] = self.occupiedPRM?.encodeToJSON()
        nillableDictionary["occupied"] = self.occupied?.encodeToJSON()
        nillableDictionary["available_PRM"] = self.availablePRM?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
