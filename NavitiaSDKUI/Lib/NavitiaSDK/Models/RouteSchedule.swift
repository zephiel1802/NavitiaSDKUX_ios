//
// RouteSchedule.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class RouteSchedule: JSONEncodable, Mappable, Codable {

    public var displayInformations: RouteDisplayInformation?
    public var table: Table?
    public var additionalInformations: String?
    public var geojson: MultiLineStringSchema?
    public var links: [LinkSchema]?


    public init() {}
    required public init?(map: Map) {

    }


    enum CodingKeys: String, CodingKey {
        case displayInformations = "display_informations"
        case table = "table"
        case additionalInformations = "additional_informations"
        case geojson = "geojson"
        case links = "links"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(displayInformations, forKey: .displayInformations)
        try container.encode(table, forKey: .table)
        try container.encode(additionalInformations, forKey: .additionalInformations)
        try container.encode(geojson, forKey: .geojson)
        try container.encode(links, forKey: .links)
    }

    public func mapping(map: Map) {
        displayInformations <- map["display_informations"]
        table <- map["table"]
        additionalInformations <- map["additional_informations"]
        geojson <- map["geojson"]
        links <- map["links"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["display_informations"] = self.displayInformations?.encodeToJSON()
        nillableDictionary["table"] = self.table?.encodeToJSON()
        nillableDictionary["additional_informations"] = self.additionalInformations
        nillableDictionary["geojson"] = self.geojson?.encodeToJSON()
        nillableDictionary["links"] = self.links?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
