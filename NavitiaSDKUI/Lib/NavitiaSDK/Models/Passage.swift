//
// Passage.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class Passage: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case displayInformations, stopPoint, route, links, stopDateTime, unknown
    }

    public var displayInformations: VJDisplayInformation?
    public var stopPoint: StopPoint?
    public var route: Route?
    public var links: [LinkSchema]?
    public var stopDateTime: StopDateTime?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        displayInformations = try container.decode(VJDisplayInformation.self, forKey: .displayInformations)
        stopPoint = try container.decode(StopPoint.self, forKey: .stopPoint)
        route = try container.decode(Route.self, forKey: .route)
        links = try container.decode([LinkSchema].self, forKey: .links)
        stopDateTime = try container.decode(StopDateTime.self, forKey: .stopDateTime)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(displayInformations, forKey: .displayInformations)
        try container.encode(stopPoint, forKey: .stopPoint)
        try container.encode(route, forKey: .route)
        try container.encode(links, forKey: .links)
        try container.encode(stopDateTime, forKey: .stopDateTime)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        displayInformations <- map["display_informations"]
        stopPoint <- map["stop_point"]
        route <- map["route"]
        links <- map["links"]
        stopDateTime <- map["stop_date_time"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["display_informations"] = self.displayInformations?.encodeToJSON()
        nillableDictionary["stop_point"] = self.stopPoint?.encodeToJSON()
        nillableDictionary["route"] = self.route?.encodeToJSON()
        nillableDictionary["links"] = self.links?.encodeToJSON()
        nillableDictionary["stop_date_time"] = self.stopDateTime?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
