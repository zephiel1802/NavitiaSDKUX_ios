//
// StopDateTime.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class StopDateTime: JSONEncodable, Mappable, Codable {

/** Coding keys for Codable protocol */
    enum CodingKeys: CodingKey {
        case stopPoint, links, arrivalDateTime, additionalInformations, departureDateTime, baseArrivalDateTime, baseDepartureDateTime, dataFreshness, unknown
    }

    public enum AdditionalInformations: String, Codable { 
        case pickUpOnly = "pick_up_only"
        case dropOffOnly = "drop_off_only"
        case onDemandTransport = "on_demand_transport"
        case dateTimeEstimated = "date_time_estimated"
    }
    public enum DataFreshness: String, Codable { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    public var stopPoint: StopPoint?
    public var links: [LinkSchema]?
    public var arrivalDateTime: String?
    public var additionalInformations: [AdditionalInformations]?
    public var departureDateTime: String?
    public var baseArrivalDateTime: String?
    public var baseDepartureDateTime: String?
    public var dataFreshness: DataFreshness?

    
    required public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        stopPoint = try container.decode(StopPoint.self, forKey: .stopPoint)
        links = try container.decode([LinkSchema].self, forKey: .links)
        arrivalDateTime = try container.decode(String.self, forKey: .arrivalDateTime)
        additionalInformations = try container.decode([AdditionalInformations].self, forKey: .additionalInformations)
        departureDateTime = try container.decode(String.self, forKey: .departureDateTime)
        baseArrivalDateTime = try container.decode(String.self, forKey: .baseArrivalDateTime)
        baseDepartureDateTime = try container.decode(String.self, forKey: .baseDepartureDateTime)
        dataFreshness = try container.decode(DataFreshness.self, forKey: .dataFreshness)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(stopPoint, forKey: .stopPoint)
        try container.encode(links, forKey: .links)
        try container.encode(arrivalDateTime, forKey: .arrivalDateTime)
        try container.encode(additionalInformations, forKey: .additionalInformations)
        try container.encode(departureDateTime, forKey: .departureDateTime)
        try container.encode(baseArrivalDateTime, forKey: .baseArrivalDateTime)
        try container.encode(baseDepartureDateTime, forKey: .baseDepartureDateTime)
        try container.encode(dataFreshness, forKey: .dataFreshness)
    }

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        stopPoint <- map["stop_point"]
        links <- map["links"]
        arrivalDateTime <- map["arrival_date_time"]
        additionalInformations <- map["additional_informations"]
        departureDateTime <- map["departure_date_time"]
        baseArrivalDateTime <- map["base_arrival_date_time"]
        baseDepartureDateTime <- map["base_departure_date_time"]
        dataFreshness <- map["data_freshness"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["stop_point"] = self.stopPoint?.encodeToJSON()
        nillableDictionary["links"] = self.links?.encodeToJSON()
        nillableDictionary["arrival_date_time"] = self.arrivalDateTime
        nillableDictionary["additional_informations"] = self.additionalInformations?.map({$0.rawValue}).encodeToJSON()
        nillableDictionary["departure_date_time"] = self.departureDateTime
        nillableDictionary["base_arrival_date_time"] = self.baseArrivalDateTime
        nillableDictionary["base_departure_date_time"] = self.baseDepartureDateTime
        nillableDictionary["data_freshness"] = self.dataFreshness?.rawValue

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
