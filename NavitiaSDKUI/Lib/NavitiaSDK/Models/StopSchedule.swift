//
// StopSchedule.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class StopSchedule: JSONEncodable, Mappable, Codable {

    public var stopPoint: StopPoint?
    public var links: [LinkSchema]?
    public var dateTimes: [DateTimeType]?
    public var route: Route?
    public var additionalInformations: String?
    public var displayInformations: RouteDisplayInformation?
    public var lastDatetime: DateTimeType?
    public var firstDatetime: DateTimeType?

    public init() {}
    required public init?(map: Map) {

    }


    enum CodingKeys: String, CodingKey {
        case stopPoint = "stop_point"
        case links = "links"
        case dateTimes = "date_times"
        case route = "route"
        case additionalInformations = "additional_informations"
        case displayInformations = "display_informations"
        case lastDatetime = "last_datetime"
        case firstDatetime = "first_datetime"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(stopPoint, forKey: .stopPoint)
        try container.encode(links, forKey: .links)
        try container.encode(dateTimes, forKey: .dateTimes)
        try container.encode(route, forKey: .route)
        try container.encode(additionalInformations, forKey: .additionalInformations)
        try container.encode(displayInformations, forKey: .displayInformations)
        try container.encode(lastDatetime, forKey: .lastDatetime)
        try container.encode(firstDatetime, forKey: .firstDatetime)
    }

    public func mapping(map: Map) {
        stopPoint <- map["stop_point"]
        links <- map["links"]
        dateTimes <- map["date_times"]
        route <- map["route"]
        additionalInformations <- map["additional_informations"]
        displayInformations <- map["display_informations"]
        lastDatetime <- map["last_datetime"]
        firstDatetime <- map["first_datetime"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["stop_point"] = self.stopPoint?.encodeToJSON()
        nillableDictionary["links"] = self.links?.encodeToJSON()
        nillableDictionary["date_times"] = self.dateTimes?.encodeToJSON()
        nillableDictionary["route"] = self.route?.encodeToJSON()
        nillableDictionary["additional_informations"] = self.additionalInformations
        nillableDictionary["display_informations"] = self.displayInformations?.encodeToJSON()
        nillableDictionary["last_datetime"] = self.lastDatetime?.encodeToJSON()
        nillableDictionary["first_datetime"] = self.firstDatetime?.encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
