//
// Address.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class Address: JSONEncodable, Mappable, Codable {

    /** Name of the object */
    public var name: String?
    public var houseNumber: Int32?
    public var coord: Coord?
    public var label: String?
    public var administrativeRegions: [Admin]?
    /** Identifier of the object */
    public var id: String?


    public init() {}
    required public init?(map: Map) {

    }


    enum CodingKeys: String, CodingKey {
        case name = "name"
        case houseNumber = "house_number"
        case coord = "coord"
        case label = "label"
        case administrativeRegions = "administrative_regions"
        case id = "id"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(houseNumber, forKey: .houseNumber)
        try container.encode(coord, forKey: .coord)
        try container.encode(label, forKey: .label)
        try container.encode(administrativeRegions, forKey: .administrativeRegions)
        try container.encode(id, forKey: .id)
    }

    public func mapping(map: Map) {
        name <- map["name"]
        houseNumber <- map["house_number"]
        coord <- map["coord"]
        label <- map["label"]
        administrativeRegions <- map["administrative_regions"]
        id <- map["id"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["name"] = self.name
        nillableDictionary["house_number"] = self.houseNumber?.encodeToJSON()
        nillableDictionary["coord"] = self.coord?.encodeToJSON()
        nillableDictionary["label"] = self.label
        nillableDictionary["administrative_regions"] = self.administrativeRegions?.encodeToJSON()
        nillableDictionary["id"] = self.id

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
