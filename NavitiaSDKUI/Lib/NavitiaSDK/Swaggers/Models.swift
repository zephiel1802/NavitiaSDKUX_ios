// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error?)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> T {
        let key = discriminator;
        if let decoder = decoders[key] {
            return decoder(source, nil) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0, instance: nil) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value, instance: nil)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return (source as! NSNumber).int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.int64Value as! T;
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source, instance) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source, instance: nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int64 {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [Address]
        Decoders.addDecoder(clazz: [Address].self) { (source: AnyObject, instance: AnyObject?) -> [Address] in
            return Decoders.decode(clazz: [Address].self, source: source)
        }
        // Decoder for Address
        Decoders.addDecoder(clazz: Address.self) { (source: AnyObject, instance: AnyObject?) -> Address in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Address() : instance as! Address
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.houseNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["house_number"] as AnyObject?)
            result.coord = Decoders.decodeOptional(clazz: Coord.self, source: sourceDictionary["coord"] as AnyObject?)
            result.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            result.administrativeRegions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["administrative_regions"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [Admin]
        Decoders.addDecoder(clazz: [Admin].self) { (source: AnyObject, instance: AnyObject?) -> [Admin] in
            return Decoders.decode(clazz: [Admin].self, source: source)
        }
        // Decoder for Admin
        Decoders.addDecoder(clazz: Admin.self) { (source: AnyObject, instance: AnyObject?) -> Admin in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Admin() : instance as! Admin
            
            result.insee = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["insee"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.level = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["level"] as AnyObject?)
            result.coord = Decoders.decodeOptional(clazz: Coord.self, source: sourceDictionary["coord"] as AnyObject?)
            result.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.zipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip_code"] as AnyObject?)
            return result
        }


        // Decoder for [Amount]
        Decoders.addDecoder(clazz: [Amount].self) { (source: AnyObject, instance: AnyObject?) -> [Amount] in
            return Decoders.decode(clazz: [Amount].self, source: source)
        }
        // Decoder for Amount
        Decoders.addDecoder(clazz: Amount.self) { (source: AnyObject, instance: AnyObject?) -> Amount in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Amount() : instance as! Amount
            
            result.value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["value"] as AnyObject?)
            result.unit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unit"] as AnyObject?)
            return result
        }


        // Decoder for [Arrivals]
        Decoders.addDecoder(clazz: [Arrivals].self) { (source: AnyObject, instance: AnyObject?) -> [Arrivals] in
            return Decoders.decode(clazz: [Arrivals].self, source: source)
        }
        // Decoder for Arrivals
        Decoders.addDecoder(clazz: Arrivals.self) { (source: AnyObject, instance: AnyObject?) -> Arrivals in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Arrivals() : instance as! Arrivals
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.arrivals = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["arrivals"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.exceptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["exceptions"] as AnyObject?)
            return result
        }


        // Decoder for [BetaEndpoints]
        Decoders.addDecoder(clazz: [BetaEndpoints].self) { (source: AnyObject, instance: AnyObject?) -> [BetaEndpoints] in
            return Decoders.decode(clazz: [BetaEndpoints].self, source: source)
        }
        // Decoder for BetaEndpoints
        Decoders.addDecoder(clazz: BetaEndpoints.self) { (source: AnyObject, instance: AnyObject?) -> BetaEndpoints in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? BetaEndpoints() : instance as! BetaEndpoints
            
            result.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [CO2]
        Decoders.addDecoder(clazz: [CO2].self) { (source: AnyObject, instance: AnyObject?) -> [CO2] in
            return Decoders.decode(clazz: [CO2].self, source: source)
        }
        // Decoder for CO2
        Decoders.addDecoder(clazz: CO2.self) { (source: AnyObject, instance: AnyObject?) -> CO2 in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CO2() : instance as! CO2
            
            result.co2Emission = Decoders.decodeOptional(clazz: Amount.self, source: sourceDictionary["co2_emission"] as AnyObject?)
            return result
        }


        // Decoder for [Calendar]
        Decoders.addDecoder(clazz: [Calendar].self) { (source: AnyObject, instance: AnyObject?) -> [Calendar] in
            return Decoders.decode(clazz: [Calendar].self, source: source)
        }
        // Decoder for Calendar
        Decoders.addDecoder(clazz: Calendar.self) { (source: AnyObject, instance: AnyObject?) -> Calendar in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Calendar() : instance as! Calendar
            
            result.activePeriods = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["active_periods"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.validityPattern = Decoders.decodeOptional(clazz: ValidityPattern.self, source: sourceDictionary["validity_pattern"] as AnyObject?)
            result.exceptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["exceptions"] as AnyObject?)
            result.weekPattern = Decoders.decodeOptional(clazz: WeekPattern.self, source: sourceDictionary["week_pattern"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [CalendarException]
        Decoders.addDecoder(clazz: [CalendarException].self) { (source: AnyObject, instance: AnyObject?) -> [CalendarException] in
            return Decoders.decode(clazz: [CalendarException].self, source: source)
        }
        // Decoder for CalendarException
        Decoders.addDecoder(clazz: CalendarException.self) { (source: AnyObject, instance: AnyObject?) -> CalendarException in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CalendarException() : instance as! CalendarException
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.datetime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["datetime"] as AnyObject?)
            return result
        }


        // Decoder for [CalendarPeriod]
        Decoders.addDecoder(clazz: [CalendarPeriod].self) { (source: AnyObject, instance: AnyObject?) -> [CalendarPeriod] in
            return Decoders.decode(clazz: [CalendarPeriod].self, source: source)
        }
        // Decoder for CalendarPeriod
        Decoders.addDecoder(clazz: CalendarPeriod.self) { (source: AnyObject, instance: AnyObject?) -> CalendarPeriod in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CalendarPeriod() : instance as! CalendarPeriod
            
            result.begin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["begin"] as AnyObject?)
            result.end = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["end"] as AnyObject?)
            return result
        }


        // Decoder for [Calendars]
        Decoders.addDecoder(clazz: [Calendars].self) { (source: AnyObject, instance: AnyObject?) -> [Calendars] in
            return Decoders.decode(clazz: [Calendars].self, source: source)
        }
        // Decoder for Calendars
        Decoders.addDecoder(clazz: Calendars.self) { (source: AnyObject, instance: AnyObject?) -> Calendars in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Calendars() : instance as! Calendars
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.calendars = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["calendars"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [CarPark]
        Decoders.addDecoder(clazz: [CarPark].self) { (source: AnyObject, instance: AnyObject?) -> [CarPark] in
            return Decoders.decode(clazz: [CarPark].self, source: source)
        }
        // Decoder for CarPark
        Decoders.addDecoder(clazz: CarPark.self) { (source: AnyObject, instance: AnyObject?) -> CarPark in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CarPark() : instance as! CarPark
            
            result.available = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["available"] as AnyObject?)
            result.totalPlaces = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_places"] as AnyObject?)
            result.occupiedPRM = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["occupied_PRM"] as AnyObject?)
            result.occupied = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["occupied"] as AnyObject?)
            result.availablePRM = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["available_PRM"] as AnyObject?)
            return result
        }


        // Decoder for [Cause]
        Decoders.addDecoder(clazz: [Cause].self) { (source: AnyObject, instance: AnyObject?) -> [Cause] in
            return Decoders.decode(clazz: [Cause].self, source: source)
        }
        // Decoder for Cause
        Decoders.addDecoder(clazz: Cause.self) { (source: AnyObject, instance: AnyObject?) -> Cause in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Cause() : instance as! Cause
            
            result.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            return result
        }


        // Decoder for [CellLatSchema]
        Decoders.addDecoder(clazz: [CellLatSchema].self) { (source: AnyObject, instance: AnyObject?) -> [CellLatSchema] in
            return Decoders.decode(clazz: [CellLatSchema].self, source: source)
        }
        // Decoder for CellLatSchema
        Decoders.addDecoder(clazz: CellLatSchema.self) { (source: AnyObject, instance: AnyObject?) -> CellLatSchema in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CellLatSchema() : instance as! CellLatSchema
            
            result.minLat = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["min_lat"] as AnyObject?)
            result.maxLat = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["max_lat"] as AnyObject?)
            result.centerLat = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["center_lat"] as AnyObject?)
            return result
        }


        // Decoder for [CellLonSchema]
        Decoders.addDecoder(clazz: [CellLonSchema].self) { (source: AnyObject, instance: AnyObject?) -> [CellLonSchema] in
            return Decoders.decode(clazz: [CellLonSchema].self, source: source)
        }
        // Decoder for CellLonSchema
        Decoders.addDecoder(clazz: CellLonSchema.self) { (source: AnyObject, instance: AnyObject?) -> CellLonSchema in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CellLonSchema() : instance as! CellLonSchema
            
            result.minLon = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["min_lon"] as AnyObject?)
            result.centerLon = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["center_lon"] as AnyObject?)
            result.maxLon = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["max_lon"] as AnyObject?)
            return result
        }


        // Decoder for [Channel]
        Decoders.addDecoder(clazz: [Channel].self) { (source: AnyObject, instance: AnyObject?) -> [Channel] in
            return Decoders.decode(clazz: [Channel].self, source: source)
        }
        // Decoder for Channel
        Decoders.addDecoder(clazz: Channel.self) { (source: AnyObject, instance: AnyObject?) -> Channel in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Channel() : instance as! Channel
            
            result.contentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content_type"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            if let types = sourceDictionary["types"] as? [String] { 
                result.types  = types.map ({ Channel.Types(rawValue: $0)! })
            }
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [Code]
        Decoders.addDecoder(clazz: [Code].self) { (source: AnyObject, instance: AnyObject?) -> [Code] in
            return Decoders.decode(clazz: [Code].self, source: source)
        }
        // Decoder for Code
        Decoders.addDecoder(clazz: Code.self) { (source: AnyObject, instance: AnyObject?) -> Code in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Code() : instance as! Code
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [Comment]
        Decoders.addDecoder(clazz: [Comment].self) { (source: AnyObject, instance: AnyObject?) -> [Comment] in
            return Decoders.decode(clazz: [Comment].self, source: source)
        }
        // Decoder for Comment
        Decoders.addDecoder(clazz: Comment.self) { (source: AnyObject, instance: AnyObject?) -> Comment in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Comment() : instance as! Comment
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [CommercialMode]
        Decoders.addDecoder(clazz: [CommercialMode].self) { (source: AnyObject, instance: AnyObject?) -> [CommercialMode] in
            return Decoders.decode(clazz: [CommercialMode].self, source: source)
        }
        // Decoder for CommercialMode
        Decoders.addDecoder(clazz: CommercialMode.self) { (source: AnyObject, instance: AnyObject?) -> CommercialMode in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CommercialMode() : instance as! CommercialMode
            
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [CommercialModes]
        Decoders.addDecoder(clazz: [CommercialModes].self) { (source: AnyObject, instance: AnyObject?) -> [CommercialModes] in
            return Decoders.decode(clazz: [CommercialModes].self, source: source)
        }
        // Decoder for CommercialModes
        Decoders.addDecoder(clazz: CommercialModes.self) { (source: AnyObject, instance: AnyObject?) -> CommercialModes in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CommercialModes() : instance as! CommercialModes
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.commercialModes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["commercial_modes"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [Companie]
        Decoders.addDecoder(clazz: [Companie].self) { (source: AnyObject, instance: AnyObject?) -> [Companie] in
            return Decoders.decode(clazz: [Companie].self, source: source)
        }
        // Decoder for Companie
        Decoders.addDecoder(clazz: Companie.self) { (source: AnyObject, instance: AnyObject?) -> Companie in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Companie() : instance as! Companie
            
            result.codes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codes"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [Companies]
        Decoders.addDecoder(clazz: [Companies].self) { (source: AnyObject, instance: AnyObject?) -> [Companies] in
            return Decoders.decode(clazz: [Companies].self, source: source)
        }
        // Decoder for Companies
        Decoders.addDecoder(clazz: Companies.self) { (source: AnyObject, instance: AnyObject?) -> Companies in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Companies() : instance as! Companies
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.companies = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["companies"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [Context]
        Decoders.addDecoder(clazz: [Context].self) { (source: AnyObject, instance: AnyObject?) -> [Context] in
            return Decoders.decode(clazz: [Context].self, source: source)
        }
        // Decoder for Context
        Decoders.addDecoder(clazz: Context.self) { (source: AnyObject, instance: AnyObject?) -> Context in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Context() : instance as! Context
            
            result.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"] as AnyObject?)
            result.currentDatetime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["current_datetime"] as AnyObject?)
            result.carDirectPath = Decoders.decodeOptional(clazz: CO2.self, source: sourceDictionary["car_direct_path"] as AnyObject?)
            return result
        }


        // Decoder for [Contributor]
        Decoders.addDecoder(clazz: [Contributor].self) { (source: AnyObject, instance: AnyObject?) -> [Contributor] in
            return Decoders.decode(clazz: [Contributor].self, source: source)
        }
        // Decoder for Contributor
        Decoders.addDecoder(clazz: Contributor.self) { (source: AnyObject, instance: AnyObject?) -> Contributor in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Contributor() : instance as! Contributor
            
            result.website = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["website"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.license = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["license"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [Contributors]
        Decoders.addDecoder(clazz: [Contributors].self) { (source: AnyObject, instance: AnyObject?) -> [Contributors] in
            return Decoders.decode(clazz: [Contributors].self, source: source)
        }
        // Decoder for Contributors
        Decoders.addDecoder(clazz: Contributors.self) { (source: AnyObject, instance: AnyObject?) -> Contributors in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Contributors() : instance as! Contributors
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.contributors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["contributors"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [Coord]
        Decoders.addDecoder(clazz: [Coord].self) { (source: AnyObject, instance: AnyObject?) -> [Coord] in
            return Decoders.decode(clazz: [Coord].self, source: source)
        }
        // Decoder for Coord
        Decoders.addDecoder(clazz: Coord.self) { (source: AnyObject, instance: AnyObject?) -> Coord in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Coord() : instance as! Coord
            
            result.lat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lat"] as AnyObject?)
            result.lon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lon"] as AnyObject?)
            return result
        }


        // Decoder for [Cost]
        Decoders.addDecoder(clazz: [Cost].self) { (source: AnyObject, instance: AnyObject?) -> [Cost] in
            return Decoders.decode(clazz: [Cost].self, source: source)
        }
        // Decoder for Cost
        Decoders.addDecoder(clazz: Cost.self) { (source: AnyObject, instance: AnyObject?) -> Cost in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Cost() : instance as! Cost
            
            result.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [Coverage]
        Decoders.addDecoder(clazz: [Coverage].self) { (source: AnyObject, instance: AnyObject?) -> [Coverage] in
            return Decoders.decode(clazz: [Coverage].self, source: source)
        }
        // Decoder for Coverage
        Decoders.addDecoder(clazz: Coverage.self) { (source: AnyObject, instance: AnyObject?) -> Coverage in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Coverage() : instance as! Coverage
            
            result.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?)
            result.datasetCreatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dataset_created_at"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.startProductionDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_production_date"] as AnyObject?)
            result.shape = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shape"] as AnyObject?)
            result.endProductionDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["end_production_date"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: CoverageError.self, source: sourceDictionary["error"] as AnyObject?)
            result.lastLoadAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_load_at"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [CoverageError]
        Decoders.addDecoder(clazz: [CoverageError].self) { (source: AnyObject, instance: AnyObject?) -> [CoverageError] in
            return Decoders.decode(clazz: [CoverageError].self, source: source)
        }
        // Decoder for CoverageError
        Decoders.addDecoder(clazz: CoverageError.self) { (source: AnyObject, instance: AnyObject?) -> CoverageError in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CoverageError() : instance as! CoverageError
            
            result.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [Coverages]
        Decoders.addDecoder(clazz: [Coverages].self) { (source: AnyObject, instance: AnyObject?) -> [Coverages] in
            return Decoders.decode(clazz: [Coverages].self, source: source)
        }
        // Decoder for Coverages
        Decoders.addDecoder(clazz: Coverages.self) { (source: AnyObject, instance: AnyObject?) -> Coverages in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Coverages() : instance as! Coverages
            
            result.regions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["regions"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            return result
        }


        // Decoder for [CurrentAvailability]
        Decoders.addDecoder(clazz: [CurrentAvailability].self) { (source: AnyObject, instance: AnyObject?) -> [CurrentAvailability] in
            return Decoders.decode(clazz: [CurrentAvailability].self, source: source)
        }
        // Decoder for CurrentAvailability
        Decoders.addDecoder(clazz: CurrentAvailability.self) { (source: AnyObject, instance: AnyObject?) -> CurrentAvailability in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? CurrentAvailability() : instance as! CurrentAvailability
            
            if let status = sourceDictionary["status"] as? String { 
                result.status = CurrentAvailability.Status(rawValue: (status))
            }
            
            result.effect = Decoders.decodeOptional(clazz: Effect.self, source: sourceDictionary["effect"] as AnyObject?)
            result.cause = Decoders.decodeOptional(clazz: Cause.self, source: sourceDictionary["cause"] as AnyObject?)
            result.periods = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["periods"] as AnyObject?)
            result.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated_at"] as AnyObject?)
            return result
        }


        // Decoder for [Dataset]
        Decoders.addDecoder(clazz: [Dataset].self) { (source: AnyObject, instance: AnyObject?) -> [Dataset] in
            return Decoders.decode(clazz: [Dataset].self, source: source)
        }
        // Decoder for Dataset
        Decoders.addDecoder(clazz: Dataset.self) { (source: AnyObject, instance: AnyObject?) -> Dataset in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Dataset() : instance as! Dataset
            
            result.realtimeLevel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["realtime_level"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.system = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["system"] as AnyObject?)
            result.startValidationDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_validation_date"] as AnyObject?)
            result.endValidationDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["end_validation_date"] as AnyObject?)
            result.contributor = Decoders.decodeOptional(clazz: Contributor.self, source: sourceDictionary["contributor"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [Datasets]
        Decoders.addDecoder(clazz: [Datasets].self) { (source: AnyObject, instance: AnyObject?) -> [Datasets] in
            return Decoders.decode(clazz: [Datasets].self, source: source)
        }
        // Decoder for Datasets
        Decoders.addDecoder(clazz: Datasets.self) { (source: AnyObject, instance: AnyObject?) -> Datasets in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Datasets() : instance as! Datasets
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.datasets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["datasets"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [DateTimeType]
        Decoders.addDecoder(clazz: [DateTimeType].self) { (source: AnyObject, instance: AnyObject?) -> [DateTimeType] in
            return Decoders.decode(clazz: [DateTimeType].self, source: source)
        }
        // Decoder for DateTimeType
        Decoders.addDecoder(clazz: DateTimeType.self) { (source: AnyObject, instance: AnyObject?) -> DateTimeType in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DateTimeType() : instance as! DateTimeType
            
            result.dateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date_time"] as AnyObject?)
            result.additionalInformations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["additional_informations"] as AnyObject?)
            result.baseDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["base_date_time"] as AnyObject?)
            result.dataFreshness = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["data_freshness"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            return result
        }


        // Decoder for [Departures]
        Decoders.addDecoder(clazz: [Departures].self) { (source: AnyObject, instance: AnyObject?) -> [Departures] in
            return Decoders.decode(clazz: [Departures].self, source: source)
        }
        // Decoder for Departures
        Decoders.addDecoder(clazz: Departures.self) { (source: AnyObject, instance: AnyObject?) -> Departures in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Departures() : instance as! Departures
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.departures = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["departures"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.exceptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["exceptions"] as AnyObject?)
            return result
        }


        // Decoder for [DictAddresses]
        Decoders.addDecoder(clazz: [DictAddresses].self) { (source: AnyObject, instance: AnyObject?) -> [DictAddresses] in
            return Decoders.decode(clazz: [DictAddresses].self, source: source)
        }
        // Decoder for DictAddresses
        Decoders.addDecoder(clazz: DictAddresses.self) { (source: AnyObject, instance: AnyObject?) -> DictAddresses in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DictAddresses() : instance as! DictAddresses
            
            result.regions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["regions"] as AnyObject?)
            result.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"] as AnyObject?)
            return result
        }


        // Decoder for [Disruption]
        Decoders.addDecoder(clazz: [Disruption].self) { (source: AnyObject, instance: AnyObject?) -> [Disruption] in
            return Decoders.decode(clazz: [Disruption].self, source: source)
        }
        // Decoder for Disruption
        Decoders.addDecoder(clazz: Disruption.self) { (source: AnyObject, instance: AnyObject?) -> Disruption in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Disruption() : instance as! Disruption
            
            if let status = sourceDictionary["status"] as? String { 
                result.status = Disruption.Status(rawValue: (status))
            }
            
            result.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            result.severity = Decoders.decodeOptional(clazz: Severity.self, source: sourceDictionary["severity"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.messages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["messages"] as AnyObject?)
            result.applicationPeriods = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["application_periods"] as AnyObject?)
            result.impactId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["impact_id"] as AnyObject?)
            result.disruptionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["disruption_id"] as AnyObject?)
            result.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated_at"] as AnyObject?)
            result.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"] as AnyObject?)
            result.impactedObjects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["impacted_objects"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.disruptionUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["disruption_uri"] as AnyObject?)
            result.contributor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contributor"] as AnyObject?)
            result.cause = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cause"] as AnyObject?)
            result.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            return result
        }


        // Decoder for [DisruptionProperty]
        Decoders.addDecoder(clazz: [DisruptionProperty].self) { (source: AnyObject, instance: AnyObject?) -> [DisruptionProperty] in
            return Decoders.decode(clazz: [DisruptionProperty].self, source: source)
        }
        // Decoder for DisruptionProperty
        Decoders.addDecoder(clazz: DisruptionProperty.self) { (source: AnyObject, instance: AnyObject?) -> DisruptionProperty in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? DisruptionProperty() : instance as! DisruptionProperty
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [Disruptions]
        Decoders.addDecoder(clazz: [Disruptions].self) { (source: AnyObject, instance: AnyObject?) -> [Disruptions] in
            return Decoders.decode(clazz: [Disruptions].self, source: source)
        }
        // Decoder for Disruptions
        Decoders.addDecoder(clazz: Disruptions.self) { (source: AnyObject, instance: AnyObject?) -> Disruptions in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Disruptions() : instance as! Disruptions
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [Distances]
        Decoders.addDecoder(clazz: [Distances].self) { (source: AnyObject, instance: AnyObject?) -> [Distances] in
            return Decoders.decode(clazz: [Distances].self, source: source)
        }
        // Decoder for Distances
        Decoders.addDecoder(clazz: Distances.self) { (source: AnyObject, instance: AnyObject?) -> Distances in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Distances() : instance as! Distances
            
            result.taxi = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["taxi"] as AnyObject?)
            result.car = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["car"] as AnyObject?)
            result.walking = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["walking"] as AnyObject?)
            result.bike = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["bike"] as AnyObject?)
            result.ridesharing = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ridesharing"] as AnyObject?)
            return result
        }


        // Decoder for [Durations]
        Decoders.addDecoder(clazz: [Durations].self) { (source: AnyObject, instance: AnyObject?) -> [Durations] in
            return Decoders.decode(clazz: [Durations].self, source: source)
        }
        // Decoder for Durations
        Decoders.addDecoder(clazz: Durations.self) { (source: AnyObject, instance: AnyObject?) -> Durations in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Durations() : instance as! Durations
            
            result.taxi = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["taxi"] as AnyObject?)
            result.walking = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["walking"] as AnyObject?)
            result.car = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["car"] as AnyObject?)
            result.ridesharing = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ridesharing"] as AnyObject?)
            result.bike = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["bike"] as AnyObject?)
            result.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            return result
        }


        // Decoder for [Effect]
        Decoders.addDecoder(clazz: [Effect].self) { (source: AnyObject, instance: AnyObject?) -> [Effect] in
            return Decoders.decode(clazz: [Effect].self, source: source)
        }
        // Decoder for Effect
        Decoders.addDecoder(clazz: Effect.self) { (source: AnyObject, instance: AnyObject?) -> Effect in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Effect() : instance as! Effect
            
            result.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            return result
        }


        // Decoder for [EquipmentDetails]
        Decoders.addDecoder(clazz: [EquipmentDetails].self) { (source: AnyObject, instance: AnyObject?) -> [EquipmentDetails] in
            return Decoders.decode(clazz: [EquipmentDetails].self, source: source)
        }
        // Decoder for EquipmentDetails
        Decoders.addDecoder(clazz: EquipmentDetails.self) { (source: AnyObject, instance: AnyObject?) -> EquipmentDetails in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? EquipmentDetails() : instance as! EquipmentDetails
            
            if let embeddedType = sourceDictionary["embedded_type"] as? String { 
                result.embeddedType = EquipmentDetails.EmbeddedType(rawValue: (embeddedType))
            }
            
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.currentAvailability = Decoders.decodeOptional(clazz: CurrentAvailability.self, source: sourceDictionary["current_availability"] as AnyObject?)
            return result
        }


        // Decoder for [EquipmentReport]
        Decoders.addDecoder(clazz: [EquipmentReport].self) { (source: AnyObject, instance: AnyObject?) -> [EquipmentReport] in
            return Decoders.decode(clazz: [EquipmentReport].self, source: source)
        }
        // Decoder for EquipmentReport
        Decoders.addDecoder(clazz: EquipmentReport.self) { (source: AnyObject, instance: AnyObject?) -> EquipmentReport in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? EquipmentReport() : instance as! EquipmentReport
            
            result.line = Decoders.decodeOptional(clazz: Line.self, source: sourceDictionary["line"] as AnyObject?)
            result.stopAreaEquipments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["stop_area_equipments"] as AnyObject?)
            return result
        }


        // Decoder for [EquipmentReports]
        Decoders.addDecoder(clazz: [EquipmentReports].self) { (source: AnyObject, instance: AnyObject?) -> [EquipmentReports] in
            return Decoders.decode(clazz: [EquipmentReports].self, source: source)
        }
        // Decoder for EquipmentReports
        Decoders.addDecoder(clazz: EquipmentReports.self) { (source: AnyObject, instance: AnyObject?) -> EquipmentReports in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? EquipmentReports() : instance as! EquipmentReports
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.warnings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["warnings"] as AnyObject?)
            result.equipmentReports = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["equipment_reports"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            return result
        }


        // Decoder for [Exception]
        Decoders.addDecoder(clazz: [Exception].self) { (source: AnyObject, instance: AnyObject?) -> [Exception] in
            return Decoders.decode(clazz: [Exception].self, source: source)
        }
        // Decoder for Exception
        Decoders.addDecoder(clazz: Exception.self) { (source: AnyObject, instance: AnyObject?) -> Exception in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Exception() : instance as! Exception
            
            result.date = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [Fare]
        Decoders.addDecoder(clazz: [Fare].self) { (source: AnyObject, instance: AnyObject?) -> [Fare] in
            return Decoders.decode(clazz: [Fare].self, source: source)
        }
        // Decoder for Fare
        Decoders.addDecoder(clazz: Fare.self) { (source: AnyObject, instance: AnyObject?) -> Fare in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Fare() : instance as! Fare
            
            result.found = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["found"] as AnyObject?)
            result.total = Decoders.decodeOptional(clazz: Cost.self, source: sourceDictionary["total"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            return result
        }


        // Decoder for [FareZone]
        Decoders.addDecoder(clazz: [FareZone].self) { (source: AnyObject, instance: AnyObject?) -> [FareZone] in
            return Decoders.decode(clazz: [FareZone].self, source: source)
        }
        // Decoder for FareZone
        Decoders.addDecoder(clazz: FareZone.self) { (source: AnyObject, instance: AnyObject?) -> FareZone in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FareZone() : instance as! FareZone
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [FeedPublisher]
        Decoders.addDecoder(clazz: [FeedPublisher].self) { (source: AnyObject, instance: AnyObject?) -> [FeedPublisher] in
            return Decoders.decode(clazz: [FeedPublisher].self, source: source)
        }
        // Decoder for FeedPublisher
        Decoders.addDecoder(clazz: FeedPublisher.self) { (source: AnyObject, instance: AnyObject?) -> FeedPublisher in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? FeedPublisher() : instance as! FeedPublisher
            
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.license = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["license"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [GeoStatus]
        Decoders.addDecoder(clazz: [GeoStatus].self) { (source: AnyObject, instance: AnyObject?) -> [GeoStatus] in
            return Decoders.decode(clazz: [GeoStatus].self, source: source)
        }
        // Decoder for GeoStatus
        Decoders.addDecoder(clazz: GeoStatus.self) { (source: AnyObject, instance: AnyObject?) -> GeoStatus in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GeoStatus() : instance as! GeoStatus
            
            result.nbAdminsFromCities = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nb_admins_from_cities"] as AnyObject?)
            result.streetNetworkSources = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["street_network_sources"] as AnyObject?)
            result.poiSources = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["poi_sources"] as AnyObject?)
            result.nbAddresses = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nb_addresses"] as AnyObject?)
            result.nbAdmins = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nb_admins"] as AnyObject?)
            result.nbPois = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nb_pois"] as AnyObject?)
            result.nbWays = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nb_ways"] as AnyObject?)
            return result
        }


        // Decoder for [GeoStatus1]
        Decoders.addDecoder(clazz: [GeoStatus1].self) { (source: AnyObject, instance: AnyObject?) -> [GeoStatus1] in
            return Decoders.decode(clazz: [GeoStatus1].self, source: source)
        }
        // Decoder for GeoStatus1
        Decoders.addDecoder(clazz: GeoStatus1.self) { (source: AnyObject, instance: AnyObject?) -> GeoStatus1 in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GeoStatus1() : instance as! GeoStatus1
            
            result.geoStatus = Decoders.decodeOptional(clazz: GeoStatus.self, source: sourceDictionary["geo_status"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            return result
        }


        // Decoder for [GraphicalIsrochone]
        Decoders.addDecoder(clazz: [GraphicalIsrochone].self) { (source: AnyObject, instance: AnyObject?) -> [GraphicalIsrochone] in
            return Decoders.decode(clazz: [GraphicalIsrochone].self, source: source)
        }
        // Decoder for GraphicalIsrochone
        Decoders.addDecoder(clazz: GraphicalIsrochone.self) { (source: AnyObject, instance: AnyObject?) -> GraphicalIsrochone in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GraphicalIsrochone() : instance as! GraphicalIsrochone
            
            result.maxDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_duration"] as AnyObject?)
            result.from = Decoders.decodeOptional(clazz: Place.self, source: sourceDictionary["from"] as AnyObject?)
            result.geojson = Decoders.decodeOptional(clazz: GraphicalIsrochoneGeojson.self, source: sourceDictionary["geojson"] as AnyObject?)
            result.minDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_duration"] as AnyObject?)
            result.minDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["min_date_time"] as AnyObject?)
            result.to = Decoders.decodeOptional(clazz: Place.self, source: sourceDictionary["to"] as AnyObject?)
            result.requestedDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requested_date_time"] as AnyObject?)
            result.maxDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["max_date_time"] as AnyObject?)
            return result
        }


        // Decoder for [GraphicalIsrochone1]
        Decoders.addDecoder(clazz: [GraphicalIsrochone1].self) { (source: AnyObject, instance: AnyObject?) -> [GraphicalIsrochone1] in
            return Decoders.decode(clazz: [GraphicalIsrochone1].self, source: source)
        }
        // Decoder for GraphicalIsrochone1
        Decoders.addDecoder(clazz: GraphicalIsrochone1.self) { (source: AnyObject, instance: AnyObject?) -> GraphicalIsrochone1 in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GraphicalIsrochone1() : instance as! GraphicalIsrochone1
            
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.warnings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["warnings"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.isochrones = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["isochrones"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [GraphicalIsrochoneGeojson]
        Decoders.addDecoder(clazz: [GraphicalIsrochoneGeojson].self) { (source: AnyObject, instance: AnyObject?) -> [GraphicalIsrochoneGeojson] in
            return Decoders.decode(clazz: [GraphicalIsrochoneGeojson].self, source: source)
        }
        // Decoder for GraphicalIsrochoneGeojson
        Decoders.addDecoder(clazz: GraphicalIsrochoneGeojson.self) { (source: AnyObject, instance: AnyObject?) -> GraphicalIsrochoneGeojson in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GraphicalIsrochoneGeojson() : instance as! GraphicalIsrochoneGeojson
            
            result.coordinates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coordinates"] as AnyObject?)
            return result
        }


        // Decoder for [Header]
        Decoders.addDecoder(clazz: [Header].self) { (source: AnyObject, instance: AnyObject?) -> [Header] in
            return Decoders.decode(clazz: [Header].self, source: source)
        }
        // Decoder for Header
        Decoders.addDecoder(clazz: Header.self) { (source: AnyObject, instance: AnyObject?) -> Header in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Header() : instance as! Header
            
            result.displayInformations = Decoders.decodeOptional(clazz: VJDisplayInformation.self, source: sourceDictionary["display_informations"] as AnyObject?)
            result.additionalInformations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["additional_informations"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            return result
        }


        // Decoder for [HeatMap]
        Decoders.addDecoder(clazz: [HeatMap].self) { (source: AnyObject, instance: AnyObject?) -> [HeatMap] in
            return Decoders.decode(clazz: [HeatMap].self, source: source)
        }
        // Decoder for HeatMap
        Decoders.addDecoder(clazz: HeatMap.self) { (source: AnyObject, instance: AnyObject?) -> HeatMap in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HeatMap() : instance as! HeatMap
            
            result.to = Decoders.decodeOptional(clazz: Place.self, source: sourceDictionary["to"] as AnyObject?)
            result.requestedDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requested_date_time"] as AnyObject?)
            result.from = Decoders.decodeOptional(clazz: Place.self, source: sourceDictionary["from"] as AnyObject?)
            result.heatMatrix = Decoders.decodeOptional(clazz: HeatMatrixSchema.self, source: sourceDictionary["heat_matrix"] as AnyObject?)
            return result
        }


        // Decoder for [HeatMap1]
        Decoders.addDecoder(clazz: [HeatMap1].self) { (source: AnyObject, instance: AnyObject?) -> [HeatMap1] in
            return Decoders.decode(clazz: [HeatMap1].self, source: source)
        }
        // Decoder for HeatMap1
        Decoders.addDecoder(clazz: HeatMap1.self) { (source: AnyObject, instance: AnyObject?) -> HeatMap1 in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HeatMap1() : instance as! HeatMap1
            
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.warnings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["warnings"] as AnyObject?)
            result.heatMaps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["heat_maps"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [HeatMatrixSchema]
        Decoders.addDecoder(clazz: [HeatMatrixSchema].self) { (source: AnyObject, instance: AnyObject?) -> [HeatMatrixSchema] in
            return Decoders.decode(clazz: [HeatMatrixSchema].self, source: source)
        }
        // Decoder for HeatMatrixSchema
        Decoders.addDecoder(clazz: HeatMatrixSchema.self) { (source: AnyObject, instance: AnyObject?) -> HeatMatrixSchema in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HeatMatrixSchema() : instance as! HeatMatrixSchema
            
            result.lineHeaders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["line_headers"] as AnyObject?)
            result.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            return result
        }


        // Decoder for [Impacted]
        Decoders.addDecoder(clazz: [Impacted].self) { (source: AnyObject, instance: AnyObject?) -> [Impacted] in
            return Decoders.decode(clazz: [Impacted].self, source: source)
        }
        // Decoder for Impacted
        Decoders.addDecoder(clazz: Impacted.self) { (source: AnyObject, instance: AnyObject?) -> Impacted in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Impacted() : instance as! Impacted
            
            result.impactedStops = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["impacted_stops"] as AnyObject?)
            result.ptObject = Decoders.decodeOptional(clazz: PtObject.self, source: sourceDictionary["pt_object"] as AnyObject?)
            result.impactedSection = Decoders.decodeOptional(clazz: ImpactedSection.self, source: sourceDictionary["impacted_section"] as AnyObject?)
            return result
        }


        // Decoder for [ImpactedSection]
        Decoders.addDecoder(clazz: [ImpactedSection].self) { (source: AnyObject, instance: AnyObject?) -> [ImpactedSection] in
            return Decoders.decode(clazz: [ImpactedSection].self, source: source)
        }
        // Decoder for ImpactedSection
        Decoders.addDecoder(clazz: ImpactedSection.self) { (source: AnyObject, instance: AnyObject?) -> ImpactedSection in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ImpactedSection() : instance as! ImpactedSection
            
            result.routes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["routes"] as AnyObject?)
            result.to = Decoders.decodeOptional(clazz: PtObject.self, source: sourceDictionary["to"] as AnyObject?)
            result.from = Decoders.decodeOptional(clazz: PtObject.self, source: sourceDictionary["from"] as AnyObject?)
            return result
        }


        // Decoder for [ImpactedStop]
        Decoders.addDecoder(clazz: [ImpactedStop].self) { (source: AnyObject, instance: AnyObject?) -> [ImpactedStop] in
            return Decoders.decode(clazz: [ImpactedStop].self, source: source)
        }
        // Decoder for ImpactedStop
        Decoders.addDecoder(clazz: ImpactedStop.self) { (source: AnyObject, instance: AnyObject?) -> ImpactedStop in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ImpactedStop() : instance as! ImpactedStop
            
            result.amendedArrivalTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["amended_arrival_time"] as AnyObject?)
            result.stopPoint = Decoders.decodeOptional(clazz: StopPoint.self, source: sourceDictionary["stop_point"] as AnyObject?)
            if let stopTimeEffect = sourceDictionary["stop_time_effect"] as? String { 
                result.stopTimeEffect = ImpactedStop.StopTimeEffect(rawValue: (stopTimeEffect))
            }
            
            result.departureStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_status"] as AnyObject?)
            result.isDetour = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_detour"] as AnyObject?)
            result.amendedDepartureTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["amended_departure_time"] as AnyObject?)
            result.baseArrivalTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["base_arrival_time"] as AnyObject?)
            result.cause = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cause"] as AnyObject?)
            result.baseDepartureTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["base_departure_time"] as AnyObject?)
            result.arrivalStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrival_status"] as AnyObject?)
            return result
        }


        // Decoder for [IndividualInformation]
        Decoders.addDecoder(clazz: [IndividualInformation].self) { (source: AnyObject, instance: AnyObject?) -> [IndividualInformation] in
            return Decoders.decode(clazz: [IndividualInformation].self, source: source)
        }
        // Decoder for IndividualInformation
        Decoders.addDecoder(clazz: IndividualInformation.self) { (source: AnyObject, instance: AnyObject?) -> IndividualInformation in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IndividualInformation() : instance as! IndividualInformation
            
            result.alias = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alias"] as AnyObject?)
            result.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"] as AnyObject?)
            if let gender = sourceDictionary["gender"] as? String { 
                result.gender = IndividualInformation.Gender(rawValue: (gender))
            }
            
            result.rating = Decoders.decodeOptional(clazz: IndividualRating.self, source: sourceDictionary["rating"] as AnyObject?)
            return result
        }


        // Decoder for [IndividualRating]
        Decoders.addDecoder(clazz: [IndividualRating].self) { (source: AnyObject, instance: AnyObject?) -> [IndividualRating] in
            return Decoders.decode(clazz: [IndividualRating].self, source: source)
        }
        // Decoder for IndividualRating
        Decoders.addDecoder(clazz: IndividualRating.self) { (source: AnyObject, instance: AnyObject?) -> IndividualRating in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IndividualRating() : instance as! IndividualRating
            
            result.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"] as AnyObject?)
            result.scaleMin = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["scale_min"] as AnyObject?)
            result.scaleMax = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["scale_max"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [Journey]
        Decoders.addDecoder(clazz: [Journey].self) { (source: AnyObject, instance: AnyObject?) -> [Journey] in
            return Decoders.decode(clazz: [Journey].self, source: source)
        }
        // Decoder for Journey
        Decoders.addDecoder(clazz: Journey.self) { (source: AnyObject, instance: AnyObject?) -> Journey in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Journey() : instance as! Journey
            
            result.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?)
            result.distances = Decoders.decodeOptional(clazz: Distances.self, source: sourceDictionary["distances"] as AnyObject?)
            result.from = Decoders.decodeOptional(clazz: Place.self, source: sourceDictionary["from"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            result.nbTransfers = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nb_transfers"] as AnyObject?)
            result.durations = Decoders.decodeOptional(clazz: Durations.self, source: sourceDictionary["durations"] as AnyObject?)
            result.arrivalDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrival_date_time"] as AnyObject?)
            result.calendars = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["calendars"] as AnyObject?)
            result.departureDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_date_time"] as AnyObject?)
            result.to = Decoders.decodeOptional(clazz: Place.self, source: sourceDictionary["to"] as AnyObject?)
            result.requestedDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requested_date_time"] as AnyObject?)
            result.fare = Decoders.decodeOptional(clazz: Fare.self, source: sourceDictionary["fare"] as AnyObject?)
            result.co2Emission = Decoders.decodeOptional(clazz: Amount.self, source: sourceDictionary["co2_emission"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"] as AnyObject?)
            result.sections = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sections"] as AnyObject?)
            result.debug = Decoders.decodeOptional(clazz: JourneyDebug.self, source: sourceDictionary["debug"] as AnyObject?)
            return result
        }


        // Decoder for [JourneyDebug]
        Decoders.addDecoder(clazz: [JourneyDebug].self) { (source: AnyObject, instance: AnyObject?) -> [JourneyDebug] in
            return Decoders.decode(clazz: [JourneyDebug].self, source: source)
        }
        // Decoder for JourneyDebug
        Decoders.addDecoder(clazz: JourneyDebug.self) { (source: AnyObject, instance: AnyObject?) -> JourneyDebug in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? JourneyDebug() : instance as! JourneyDebug
            
            result.nbVjExtentions = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nb_vj_extentions"] as AnyObject?)
            result.nbSections = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nb_sections"] as AnyObject?)
            result.internalId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["internal_id"] as AnyObject?)
            result.streetnetworkDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["streetnetwork_duration"] as AnyObject?)
            result.transferDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transfer_duration"] as AnyObject?)
            result.minWaitingDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_waiting_duration"] as AnyObject?)
            return result
        }


        // Decoder for [JourneyPattern]
        Decoders.addDecoder(clazz: [JourneyPattern].self) { (source: AnyObject, instance: AnyObject?) -> [JourneyPattern] in
            return Decoders.decode(clazz: [JourneyPattern].self, source: source)
        }
        // Decoder for JourneyPattern
        Decoders.addDecoder(clazz: JourneyPattern.self) { (source: AnyObject, instance: AnyObject?) -> JourneyPattern in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? JourneyPattern() : instance as! JourneyPattern
            
            result.route = Decoders.decodeOptional(clazz: Route.self, source: sourceDictionary["route"] as AnyObject?)
            result.journeyPatternPoints = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["journey_pattern_points"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [JourneyPatternPoint]
        Decoders.addDecoder(clazz: [JourneyPatternPoint].self) { (source: AnyObject, instance: AnyObject?) -> [JourneyPatternPoint] in
            return Decoders.decode(clazz: [JourneyPatternPoint].self, source: source)
        }
        // Decoder for JourneyPatternPoint
        Decoders.addDecoder(clazz: JourneyPatternPoint.self) { (source: AnyObject, instance: AnyObject?) -> JourneyPatternPoint in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? JourneyPatternPoint() : instance as! JourneyPatternPoint
            
            result.stopPoint = Decoders.decodeOptional(clazz: StopPoint.self, source: sourceDictionary["stop_point"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [JourneyPatternPoints]
        Decoders.addDecoder(clazz: [JourneyPatternPoints].self) { (source: AnyObject, instance: AnyObject?) -> [JourneyPatternPoints] in
            return Decoders.decode(clazz: [JourneyPatternPoints].self, source: source)
        }
        // Decoder for JourneyPatternPoints
        Decoders.addDecoder(clazz: JourneyPatternPoints.self) { (source: AnyObject, instance: AnyObject?) -> JourneyPatternPoints in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? JourneyPatternPoints() : instance as! JourneyPatternPoints
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.journeyPatternPoints = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["journey_pattern_points"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [JourneyPatterns]
        Decoders.addDecoder(clazz: [JourneyPatterns].self) { (source: AnyObject, instance: AnyObject?) -> [JourneyPatterns] in
            return Decoders.decode(clazz: [JourneyPatterns].self, source: source)
        }
        // Decoder for JourneyPatterns
        Decoders.addDecoder(clazz: JourneyPatterns.self) { (source: AnyObject, instance: AnyObject?) -> JourneyPatterns in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? JourneyPatterns() : instance as! JourneyPatterns
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.journeyPatterns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["journey_patterns"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [Journeys]
        Decoders.addDecoder(clazz: [Journeys].self) { (source: AnyObject, instance: AnyObject?) -> [Journeys] in
            return Decoders.decode(clazz: [Journeys].self, source: source)
        }
        // Decoder for Journeys
        Decoders.addDecoder(clazz: Journeys.self) { (source: AnyObject, instance: AnyObject?) -> Journeys in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Journeys() : instance as! Journeys
            
            result.tickets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tickets"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.journeys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["journeys"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.exceptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["exceptions"] as AnyObject?)
            return result
        }


        // Decoder for [Line]
        Decoders.addDecoder(clazz: [Line].self) { (source: AnyObject, instance: AnyObject?) -> [Line] in
            return Decoders.decode(clazz: [Line].self, source: source)
        }
        // Decoder for Line
        Decoders.addDecoder(clazz: Line.self) { (source: AnyObject, instance: AnyObject?) -> Line in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Line() : instance as! Line
            
            result.comment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comment"] as AnyObject?)
            result.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            result.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            result.network = Decoders.decodeOptional(clazz: Network.self, source: sourceDictionary["network"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.color = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["color"] as AnyObject?)
            result.routes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["routes"] as AnyObject?)
            result.geojson = Decoders.decodeOptional(clazz: MultiLineStringSchema.self, source: sourceDictionary["geojson"] as AnyObject?)
            result.textColor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text_color"] as AnyObject?)
            result.physicalModes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["physical_modes"] as AnyObject?)
            result.codes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codes"] as AnyObject?)
            result.comments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["comments"] as AnyObject?)
            result.closingTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["closing_time"] as AnyObject?)
            result.openingTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["opening_time"] as AnyObject?)
            result.commercialMode = Decoders.decodeOptional(clazz: CommercialMode.self, source: sourceDictionary["commercial_mode"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.lineGroups = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["line_groups"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [LineGroup]
        Decoders.addDecoder(clazz: [LineGroup].self) { (source: AnyObject, instance: AnyObject?) -> [LineGroup] in
            return Decoders.decode(clazz: [LineGroup].self, source: source)
        }
        // Decoder for LineGroup
        Decoders.addDecoder(clazz: LineGroup.self) { (source: AnyObject, instance: AnyObject?) -> LineGroup in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LineGroup() : instance as! LineGroup
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            result.mainLine = Decoders.decodeOptional(clazz: Line.self, source: sourceDictionary["main_line"] as AnyObject?)
            result.comments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["comments"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [LineGroups]
        Decoders.addDecoder(clazz: [LineGroups].self) { (source: AnyObject, instance: AnyObject?) -> [LineGroups] in
            return Decoders.decode(clazz: [LineGroups].self, source: source)
        }
        // Decoder for LineGroups
        Decoders.addDecoder(clazz: LineGroups.self) { (source: AnyObject, instance: AnyObject?) -> LineGroups in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LineGroups() : instance as! LineGroups
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.lineGroups = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["line_groups"] as AnyObject?)
            return result
        }


        // Decoder for [LineHeadersSchema]
        Decoders.addDecoder(clazz: [LineHeadersSchema].self) { (source: AnyObject, instance: AnyObject?) -> [LineHeadersSchema] in
            return Decoders.decode(clazz: [LineHeadersSchema].self, source: source)
        }
        // Decoder for LineHeadersSchema
        Decoders.addDecoder(clazz: LineHeadersSchema.self) { (source: AnyObject, instance: AnyObject?) -> LineHeadersSchema in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LineHeadersSchema() : instance as! LineHeadersSchema
            
            result.cellLat = Decoders.decodeOptional(clazz: CellLatSchema.self, source: sourceDictionary["cell_lat"] as AnyObject?)
            return result
        }


        // Decoder for [LineReport]
        Decoders.addDecoder(clazz: [LineReport].self) { (source: AnyObject, instance: AnyObject?) -> [LineReport] in
            return Decoders.decode(clazz: [LineReport].self, source: source)
        }
        // Decoder for LineReport
        Decoders.addDecoder(clazz: LineReport.self) { (source: AnyObject, instance: AnyObject?) -> LineReport in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LineReport() : instance as! LineReport
            
            result.line = Decoders.decodeOptional(clazz: Line.self, source: sourceDictionary["line"] as AnyObject?)
            result.ptObjects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["pt_objects"] as AnyObject?)
            return result
        }


        // Decoder for [LineReports]
        Decoders.addDecoder(clazz: [LineReports].self) { (source: AnyObject, instance: AnyObject?) -> [LineReports] in
            return Decoders.decode(clazz: [LineReports].self, source: source)
        }
        // Decoder for LineReports
        Decoders.addDecoder(clazz: LineReports.self) { (source: AnyObject, instance: AnyObject?) -> LineReports in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LineReports() : instance as! LineReports
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.warnings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["warnings"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.lineReports = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["line_reports"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [Lines]
        Decoders.addDecoder(clazz: [Lines].self) { (source: AnyObject, instance: AnyObject?) -> [Lines] in
            return Decoders.decode(clazz: [Lines].self, source: source)
        }
        // Decoder for Lines
        Decoders.addDecoder(clazz: Lines.self) { (source: AnyObject, instance: AnyObject?) -> Lines in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Lines() : instance as! Lines
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [LinesSchema]
        Decoders.addDecoder(clazz: [LinesSchema].self) { (source: AnyObject, instance: AnyObject?) -> [LinesSchema] in
            return Decoders.decode(clazz: [LinesSchema].self, source: source)
        }
        // Decoder for LinesSchema
        Decoders.addDecoder(clazz: LinesSchema.self) { (source: AnyObject, instance: AnyObject?) -> LinesSchema in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LinesSchema() : instance as! LinesSchema
            
            result.duration = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["duration"] as AnyObject?)
            result.cellLon = Decoders.decodeOptional(clazz: CellLonSchema.self, source: sourceDictionary["cell_lon"] as AnyObject?)
            return result
        }


        // Decoder for [LinkSchema]
        Decoders.addDecoder(clazz: [LinkSchema].self) { (source: AnyObject, instance: AnyObject?) -> [LinkSchema] in
            return Decoders.decode(clazz: [LinkSchema].self, source: source)
        }
        // Decoder for LinkSchema
        Decoders.addDecoder(clazz: LinkSchema.self) { (source: AnyObject, instance: AnyObject?) -> LinkSchema in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? LinkSchema() : instance as! LinkSchema
            
            result.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            result.commentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comment_type"] as AnyObject?)
            result.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?)
            result._internal = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["internal"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            result.href = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["href"] as AnyObject?)
            result.rel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rel"] as AnyObject?)
            result.templated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["templated"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [Message]
        Decoders.addDecoder(clazz: [Message].self) { (source: AnyObject, instance: AnyObject?) -> [Message] in
            return Decoders.decode(clazz: [Message].self, source: source)
        }
        // Decoder for Message
        Decoders.addDecoder(clazz: Message.self) { (source: AnyObject, instance: AnyObject?) -> Message in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Message() : instance as! Message
            
            result.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"] as AnyObject?)
            result.channel = Decoders.decodeOptional(clazz: Channel.self, source: sourceDictionary["channel"] as AnyObject?)
            return result
        }


        // Decoder for [ModelError]
        Decoders.addDecoder(clazz: [ModelError].self) { (source: AnyObject, instance: AnyObject?) -> [ModelError] in
            return Decoders.decode(clazz: [ModelError].self, source: source)
        }
        // Decoder for ModelError
        Decoders.addDecoder(clazz: ModelError.self) { (source: AnyObject, instance: AnyObject?) -> ModelError in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ModelError() : instance as! ModelError
            
            result.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [MultiLineStringSchema]
        Decoders.addDecoder(clazz: [MultiLineStringSchema].self) { (source: AnyObject, instance: AnyObject?) -> [MultiLineStringSchema] in
            return Decoders.decode(clazz: [MultiLineStringSchema].self, source: source)
        }
        // Decoder for MultiLineStringSchema
        Decoders.addDecoder(clazz: MultiLineStringSchema.self) { (source: AnyObject, instance: AnyObject?) -> MultiLineStringSchema in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? MultiLineStringSchema() : instance as! MultiLineStringSchema
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.coordinates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coordinates"] as AnyObject?)
            return result
        }


        // Decoder for [Network]
        Decoders.addDecoder(clazz: [Network].self) { (source: AnyObject, instance: AnyObject?) -> [Network] in
            return Decoders.decode(clazz: [Network].self, source: source)
        }
        // Decoder for Network
        Decoders.addDecoder(clazz: Network.self) { (source: AnyObject, instance: AnyObject?) -> Network in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Network() : instance as! Network
            
            result.codes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codes"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [Networks]
        Decoders.addDecoder(clazz: [Networks].self) { (source: AnyObject, instance: AnyObject?) -> [Networks] in
            return Decoders.decode(clazz: [Networks].self, source: source)
        }
        // Decoder for Networks
        Decoders.addDecoder(clazz: Networks.self) { (source: AnyObject, instance: AnyObject?) -> Networks in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Networks() : instance as! Networks
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.networks = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["networks"] as AnyObject?)
            return result
        }


        // Decoder for [Note]
        Decoders.addDecoder(clazz: [Note].self) { (source: AnyObject, instance: AnyObject?) -> [Note] in
            return Decoders.decode(clazz: [Note].self, source: source)
        }
        // Decoder for Note
        Decoders.addDecoder(clazz: Note.self) { (source: AnyObject, instance: AnyObject?) -> Note in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Note() : instance as! Note
            
            if let category = sourceDictionary["category"] as? String { 
                result.category = Note.Category(rawValue: (category))
            }
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            result.commentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comment_type"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [Pagination]
        Decoders.addDecoder(clazz: [Pagination].self) { (source: AnyObject, instance: AnyObject?) -> [Pagination] in
            return Decoders.decode(clazz: [Pagination].self, source: source)
        }
        // Decoder for Pagination
        Decoders.addDecoder(clazz: Pagination.self) { (source: AnyObject, instance: AnyObject?) -> Pagination in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Pagination() : instance as! Pagination
            
            result.startPage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["start_page"] as AnyObject?)
            result.itemsOnPage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["items_on_page"] as AnyObject?)
            result.itemsPerPage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["items_per_page"] as AnyObject?)
            result.totalResult = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_result"] as AnyObject?)
            return result
        }


        // Decoder for [Passage]
        Decoders.addDecoder(clazz: [Passage].self) { (source: AnyObject, instance: AnyObject?) -> [Passage] in
            return Decoders.decode(clazz: [Passage].self, source: source)
        }
        // Decoder for Passage
        Decoders.addDecoder(clazz: Passage.self) { (source: AnyObject, instance: AnyObject?) -> Passage in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Passage() : instance as! Passage
            
            result.displayInformations = Decoders.decodeOptional(clazz: VJDisplayInformation.self, source: sourceDictionary["display_informations"] as AnyObject?)
            result.stopPoint = Decoders.decodeOptional(clazz: StopPoint.self, source: sourceDictionary["stop_point"] as AnyObject?)
            result.route = Decoders.decodeOptional(clazz: Route.self, source: sourceDictionary["route"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.stopDateTime = Decoders.decodeOptional(clazz: StopDateTime.self, source: sourceDictionary["stop_date_time"] as AnyObject?)
            return result
        }


        // Decoder for [Path]
        Decoders.addDecoder(clazz: [Path].self) { (source: AnyObject, instance: AnyObject?) -> [Path] in
            return Decoders.decode(clazz: [Path].self, source: source)
        }
        // Decoder for Path
        Decoders.addDecoder(clazz: Path.self) { (source: AnyObject, instance: AnyObject?) -> Path in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Path() : instance as! Path
            
            result.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"] as AnyObject?)
            result.direction = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["direction"] as AnyObject?)
            result.length = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["length"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [Period]
        Decoders.addDecoder(clazz: [Period].self) { (source: AnyObject, instance: AnyObject?) -> [Period] in
            return Decoders.decode(clazz: [Period].self, source: source)
        }
        // Decoder for Period
        Decoders.addDecoder(clazz: Period.self) { (source: AnyObject, instance: AnyObject?) -> Period in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Period() : instance as! Period
            
            result.begin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["begin"] as AnyObject?)
            result.end = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["end"] as AnyObject?)
            return result
        }


        // Decoder for [PhysicalMode]
        Decoders.addDecoder(clazz: [PhysicalMode].self) { (source: AnyObject, instance: AnyObject?) -> [PhysicalMode] in
            return Decoders.decode(clazz: [PhysicalMode].self, source: source)
        }
        // Decoder for PhysicalMode
        Decoders.addDecoder(clazz: PhysicalMode.self) { (source: AnyObject, instance: AnyObject?) -> PhysicalMode in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PhysicalMode() : instance as! PhysicalMode
            
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [PhysicalModes]
        Decoders.addDecoder(clazz: [PhysicalModes].self) { (source: AnyObject, instance: AnyObject?) -> [PhysicalModes] in
            return Decoders.decode(clazz: [PhysicalModes].self, source: source)
        }
        // Decoder for PhysicalModes
        Decoders.addDecoder(clazz: PhysicalModes.self) { (source: AnyObject, instance: AnyObject?) -> PhysicalModes in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PhysicalModes() : instance as! PhysicalModes
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.physicalModes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["physical_modes"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [Place]
        Decoders.addDecoder(clazz: [Place].self) { (source: AnyObject, instance: AnyObject?) -> [Place] in
            return Decoders.decode(clazz: [Place].self, source: source)
        }
        // Decoder for Place
        Decoders.addDecoder(clazz: Place.self) { (source: AnyObject, instance: AnyObject?) -> Place in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Place() : instance as! Place
            
            if let embeddedType = sourceDictionary["embedded_type"] as? String { 
                result.embeddedType = Place.EmbeddedType(rawValue: (embeddedType))
            }
            
            result.stopPoint = Decoders.decodeOptional(clazz: StopPoint.self, source: sourceDictionary["stop_point"] as AnyObject?)
            result.administrativeRegion = Decoders.decodeOptional(clazz: Admin.self, source: sourceDictionary["administrative_region"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.distance = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["distance"] as AnyObject?)
            result.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"] as AnyObject?)
            result.poi = Decoders.decodeOptional(clazz: Poi.self, source: sourceDictionary["poi"] as AnyObject?)
            result.quality = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quality"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.stopArea = Decoders.decodeOptional(clazz: StopArea.self, source: sourceDictionary["stop_area"] as AnyObject?)
            return result
        }


        // Decoder for [PlaceNearby]
        Decoders.addDecoder(clazz: [PlaceNearby].self) { (source: AnyObject, instance: AnyObject?) -> [PlaceNearby] in
            return Decoders.decode(clazz: [PlaceNearby].self, source: source)
        }
        // Decoder for PlaceNearby
        Decoders.addDecoder(clazz: PlaceNearby.self) { (source: AnyObject, instance: AnyObject?) -> PlaceNearby in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PlaceNearby() : instance as! PlaceNearby
            
            if let embeddedType = sourceDictionary["embedded_type"] as? String { 
                result.embeddedType = PlaceNearby.EmbeddedType(rawValue: (embeddedType))
            }
            
            result.stopPoint = Decoders.decodeOptional(clazz: StopPoint.self, source: sourceDictionary["stop_point"] as AnyObject?)
            result.administrativeRegion = Decoders.decodeOptional(clazz: Admin.self, source: sourceDictionary["administrative_region"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.distance = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["distance"] as AnyObject?)
            result.poi = Decoders.decodeOptional(clazz: Poi.self, source: sourceDictionary["poi"] as AnyObject?)
            result.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"] as AnyObject?)
            result.quality = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quality"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.stopArea = Decoders.decodeOptional(clazz: StopArea.self, source: sourceDictionary["stop_area"] as AnyObject?)
            return result
        }


        // Decoder for [Places]
        Decoders.addDecoder(clazz: [Places].self) { (source: AnyObject, instance: AnyObject?) -> [Places] in
            return Decoders.decode(clazz: [Places].self, source: source)
        }
        // Decoder for Places
        Decoders.addDecoder(clazz: Places.self) { (source: AnyObject, instance: AnyObject?) -> Places in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Places() : instance as! Places
            
            result.places = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["places"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [PlacesNearby]
        Decoders.addDecoder(clazz: [PlacesNearby].self) { (source: AnyObject, instance: AnyObject?) -> [PlacesNearby] in
            return Decoders.decode(clazz: [PlacesNearby].self, source: source)
        }
        // Decoder for PlacesNearby
        Decoders.addDecoder(clazz: PlacesNearby.self) { (source: AnyObject, instance: AnyObject?) -> PlacesNearby in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PlacesNearby() : instance as! PlacesNearby
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.placesNearby = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["places_nearby"] as AnyObject?)
            return result
        }


        // Decoder for [Poi]
        Decoders.addDecoder(clazz: [Poi].self) { (source: AnyObject, instance: AnyObject?) -> [Poi] in
            return Decoders.decode(clazz: [Poi].self, source: source)
        }
        // Decoder for Poi
        Decoders.addDecoder(clazz: Poi.self) { (source: AnyObject, instance: AnyObject?) -> Poi in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Poi() : instance as! Poi
            
            result.poiType = Decoders.decodeOptional(clazz: PoiType.self, source: sourceDictionary["poi_type"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.carPark = Decoders.decodeOptional(clazz: CarPark.self, source: sourceDictionary["car_park"] as AnyObject?)
            result.coord = Decoders.decodeOptional(clazz: Coord.self, source: sourceDictionary["coord"] as AnyObject?)
            result.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            result.administrativeRegions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["administrative_regions"] as AnyObject?)
            result.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"] as AnyObject?)
            result.stands = Decoders.decodeOptional(clazz: Stands.self, source: sourceDictionary["stands"] as AnyObject?)
            return result
        }


        // Decoder for [PoiType]
        Decoders.addDecoder(clazz: [PoiType].self) { (source: AnyObject, instance: AnyObject?) -> [PoiType] in
            return Decoders.decode(clazz: [PoiType].self, source: source)
        }
        // Decoder for PoiType
        Decoders.addDecoder(clazz: PoiType.self) { (source: AnyObject, instance: AnyObject?) -> PoiType in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PoiType() : instance as! PoiType
            
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [PoiTypes]
        Decoders.addDecoder(clazz: [PoiTypes].self) { (source: AnyObject, instance: AnyObject?) -> [PoiTypes] in
            return Decoders.decode(clazz: [PoiTypes].self, source: source)
        }
        // Decoder for PoiTypes
        Decoders.addDecoder(clazz: PoiTypes.self) { (source: AnyObject, instance: AnyObject?) -> PoiTypes in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PoiTypes() : instance as! PoiTypes
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.poiTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["poi_types"] as AnyObject?)
            return result
        }


        // Decoder for [Pois]
        Decoders.addDecoder(clazz: [Pois].self) { (source: AnyObject, instance: AnyObject?) -> [Pois] in
            return Decoders.decode(clazz: [Pois].self, source: source)
        }
        // Decoder for Pois
        Decoders.addDecoder(clazz: Pois.self) { (source: AnyObject, instance: AnyObject?) -> Pois in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Pois() : instance as! Pois
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.pois = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["pois"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [Property]
        Decoders.addDecoder(clazz: [Property].self) { (source: AnyObject, instance: AnyObject?) -> [Property] in
            return Decoders.decode(clazz: [Property].self, source: source)
        }
        // Decoder for Property
        Decoders.addDecoder(clazz: Property.self) { (source: AnyObject, instance: AnyObject?) -> Property in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Property() : instance as! Property
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [PtObject]
        Decoders.addDecoder(clazz: [PtObject].self) { (source: AnyObject, instance: AnyObject?) -> [PtObject] in
            return Decoders.decode(clazz: [PtObject].self, source: source)
        }
        // Decoder for PtObject
        Decoders.addDecoder(clazz: PtObject.self) { (source: AnyObject, instance: AnyObject?) -> PtObject in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PtObject() : instance as! PtObject
            
            if let embeddedType = sourceDictionary["embedded_type"] as? String { 
                result.embeddedType = PtObject.EmbeddedType(rawValue: (embeddedType))
            }
            
            result.stopPoint = Decoders.decodeOptional(clazz: StopPoint.self, source: sourceDictionary["stop_point"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.route = Decoders.decodeOptional(clazz: Route.self, source: sourceDictionary["route"] as AnyObject?)
            result.stopArea = Decoders.decodeOptional(clazz: StopArea.self, source: sourceDictionary["stop_area"] as AnyObject?)
            result.commercialMode = Decoders.decodeOptional(clazz: CommercialMode.self, source: sourceDictionary["commercial_mode"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.line = Decoders.decodeOptional(clazz: Line.self, source: sourceDictionary["line"] as AnyObject?)
            result.quality = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quality"] as AnyObject?)
            result.trip = Decoders.decodeOptional(clazz: Trip.self, source: sourceDictionary["trip"] as AnyObject?)
            result.network = Decoders.decodeOptional(clazz: Network.self, source: sourceDictionary["network"] as AnyObject?)
            return result
        }


        // Decoder for [PtObjects]
        Decoders.addDecoder(clazz: [PtObjects].self) { (source: AnyObject, instance: AnyObject?) -> [PtObjects] in
            return Decoders.decode(clazz: [PtObjects].self, source: source)
        }
        // Decoder for PtObjects
        Decoders.addDecoder(clazz: PtObjects.self) { (source: AnyObject, instance: AnyObject?) -> PtObjects in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PtObjects() : instance as! PtObjects
            
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.ptObjects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["pt_objects"] as AnyObject?)
            return result
        }


        // Decoder for [RidesharingInformation]
        Decoders.addDecoder(clazz: [RidesharingInformation].self) { (source: AnyObject, instance: AnyObject?) -> [RidesharingInformation] in
            return Decoders.decode(clazz: [RidesharingInformation].self, source: source)
        }
        // Decoder for RidesharingInformation
        Decoders.addDecoder(clazz: RidesharingInformation.self) { (source: AnyObject, instance: AnyObject?) -> RidesharingInformation in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RidesharingInformation() : instance as! RidesharingInformation
            
            result._operator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operator"] as AnyObject?)
            result.driver = Decoders.decodeOptional(clazz: IndividualInformation.self, source: sourceDictionary["driver"] as AnyObject?)
            result.network = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["network"] as AnyObject?)
            result.seats = Decoders.decodeOptional(clazz: SeatsDescription.self, source: sourceDictionary["seats"] as AnyObject?)
            return result
        }


        // Decoder for [Route]
        Decoders.addDecoder(clazz: [Route].self) { (source: AnyObject, instance: AnyObject?) -> [Route] in
            return Decoders.decode(clazz: [Route].self, source: source)
        }
        // Decoder for Route
        Decoders.addDecoder(clazz: Route.self) { (source: AnyObject, instance: AnyObject?) -> Route in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Route() : instance as! Route
            
            result.direction = Decoders.decodeOptional(clazz: Place.self, source: sourceDictionary["direction"] as AnyObject?)
            result.codes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codes"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.physicalModes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["physical_modes"] as AnyObject?)
            if let isFrequence = sourceDictionary["is_frequence"] as? String { 
                result.isFrequence = Route.IsFrequence(rawValue: (isFrequence))
            }
            
            result.comments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["comments"] as AnyObject?)
            result.directionType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction_type"] as AnyObject?)
            result.geojson = Decoders.decodeOptional(clazz: MultiLineStringSchema.self, source: sourceDictionary["geojson"] as AnyObject?)
            result.stopPoints = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["stop_points"] as AnyObject?)
            result.line = Decoders.decodeOptional(clazz: Line.self, source: sourceDictionary["line"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [RouteDisplayInformation]
        Decoders.addDecoder(clazz: [RouteDisplayInformation].self) { (source: AnyObject, instance: AnyObject?) -> [RouteDisplayInformation] in
            return Decoders.decode(clazz: [RouteDisplayInformation].self, source: source)
        }
        // Decoder for RouteDisplayInformation
        Decoders.addDecoder(clazz: RouteDisplayInformation.self) { (source: AnyObject, instance: AnyObject?) -> RouteDisplayInformation in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RouteDisplayInformation() : instance as! RouteDisplayInformation
            
            result.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"] as AnyObject?)
            result.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            result.network = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["network"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.color = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["color"] as AnyObject?)
            result.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            result.commercialMode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commercial_mode"] as AnyObject?)
            result.textColor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text_color"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [RouteSchedule]
        Decoders.addDecoder(clazz: [RouteSchedule].self) { (source: AnyObject, instance: AnyObject?) -> [RouteSchedule] in
            return Decoders.decode(clazz: [RouteSchedule].self, source: source)
        }
        // Decoder for RouteSchedule
        Decoders.addDecoder(clazz: RouteSchedule.self) { (source: AnyObject, instance: AnyObject?) -> RouteSchedule in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RouteSchedule() : instance as! RouteSchedule
            
            result.displayInformations = Decoders.decodeOptional(clazz: RouteDisplayInformation.self, source: sourceDictionary["display_informations"] as AnyObject?)
            result.table = Decoders.decodeOptional(clazz: Table.self, source: sourceDictionary["table"] as AnyObject?)
            result.additionalInformations = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additional_informations"] as AnyObject?)
            result.geojson = Decoders.decodeOptional(clazz: MultiLineStringSchema.self, source: sourceDictionary["geojson"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            return result
        }


        // Decoder for [RouteSchedules]
        Decoders.addDecoder(clazz: [RouteSchedules].self) { (source: AnyObject, instance: AnyObject?) -> [RouteSchedules] in
            return Decoders.decode(clazz: [RouteSchedules].self, source: source)
        }
        // Decoder for RouteSchedules
        Decoders.addDecoder(clazz: RouteSchedules.self) { (source: AnyObject, instance: AnyObject?) -> RouteSchedules in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RouteSchedules() : instance as! RouteSchedules
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.exceptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["exceptions"] as AnyObject?)
            result.routeSchedules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["route_schedules"] as AnyObject?)
            return result
        }


        // Decoder for [Routes]
        Decoders.addDecoder(clazz: [Routes].self) { (source: AnyObject, instance: AnyObject?) -> [Routes] in
            return Decoders.decode(clazz: [Routes].self, source: source)
        }
        // Decoder for Routes
        Decoders.addDecoder(clazz: Routes.self) { (source: AnyObject, instance: AnyObject?) -> Routes in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Routes() : instance as! Routes
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.routes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["routes"] as AnyObject?)
            return result
        }


        // Decoder for [Row]
        Decoders.addDecoder(clazz: [Row].self) { (source: AnyObject, instance: AnyObject?) -> [Row] in
            return Decoders.decode(clazz: [Row].self, source: source)
        }
        // Decoder for Row
        Decoders.addDecoder(clazz: Row.self) { (source: AnyObject, instance: AnyObject?) -> Row in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Row() : instance as! Row
            
            result.stopPoint = Decoders.decodeOptional(clazz: StopPoint.self, source: sourceDictionary["stop_point"] as AnyObject?)
            result.dateTimes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["date_times"] as AnyObject?)
            return result
        }


        // Decoder for [SeatsDescription]
        Decoders.addDecoder(clazz: [SeatsDescription].self) { (source: AnyObject, instance: AnyObject?) -> [SeatsDescription] in
            return Decoders.decode(clazz: [SeatsDescription].self, source: source)
        }
        // Decoder for SeatsDescription
        Decoders.addDecoder(clazz: SeatsDescription.self) { (source: AnyObject, instance: AnyObject?) -> SeatsDescription in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SeatsDescription() : instance as! SeatsDescription
            
            result.available = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["available"] as AnyObject?)
            result.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            return result
        }


        // Decoder for [Section]
        Decoders.addDecoder(clazz: [Section].self) { (source: AnyObject, instance: AnyObject?) -> [Section] in
            return Decoders.decode(clazz: [Section].self, source: source)
        }
        // Decoder for Section
        Decoders.addDecoder(clazz: Section.self) { (source: AnyObject, instance: AnyObject?) -> Section in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Section() : instance as! Section
            
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.departureDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_date_time"] as AnyObject?)
            result.baseDepartureDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["base_departure_date_time"] as AnyObject?)
            result.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.from = Decoders.decodeOptional(clazz: Place.self, source: sourceDictionary["from"] as AnyObject?)
            result.arrivalDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrival_date_time"] as AnyObject?)
            if let additionalInformations = sourceDictionary["additional_informations"] as? [String] { 
                result.additionalInformations  = additionalInformations.map ({ Section.AdditionalInformations(rawValue: $0)! })
            }
            
            result.geojson = Decoders.decodeOptional(clazz: SectionGeoJsonSchema.self, source: sourceDictionary["geojson"] as AnyObject?)
            result.ridesharingInformations = Decoders.decodeOptional(clazz: RidesharingInformation.self, source: sourceDictionary["ridesharing_informations"] as AnyObject?)
            result.to = Decoders.decodeOptional(clazz: Place.self, source: sourceDictionary["to"] as AnyObject?)
            result.baseArrivalDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["base_arrival_date_time"] as AnyObject?)
            if let transferType = sourceDictionary["transfer_type"] as? String { 
                result.transferType = Section.TransferType(rawValue: (transferType))
            }
            
            if let type = sourceDictionary["type"] as? String { 
                result.type = Section.ModelType(rawValue: (type))
            }
            
            if let dataFreshness = sourceDictionary["data_freshness"] as? String { 
                result.dataFreshness = Section.DataFreshness(rawValue: (dataFreshness))
            }
            
            result.co2Emission = Decoders.decodeOptional(clazz: Amount.self, source: sourceDictionary["co2_emission"] as AnyObject?)
            result.path = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["path"] as AnyObject?)
            result.cycleLaneLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["cycle_lane_length"] as AnyObject?)
            result.displayInformations = Decoders.decodeOptional(clazz: VJDisplayInformation.self, source: sourceDictionary["display_informations"] as AnyObject?)
            if let mode = sourceDictionary["mode"] as? String { 
                result.mode = Section.Mode(rawValue: (mode))
            }
            
            result.ridesharingJourneys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ridesharing_journeys"] as AnyObject?)
            result.stopDateTimes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["stop_date_times"] as AnyObject?)
            return result
        }


        // Decoder for [SectionGeoJsonSchema]
        Decoders.addDecoder(clazz: [SectionGeoJsonSchema].self) { (source: AnyObject, instance: AnyObject?) -> [SectionGeoJsonSchema] in
            return Decoders.decode(clazz: [SectionGeoJsonSchema].self, source: source)
        }
        // Decoder for SectionGeoJsonSchema
        Decoders.addDecoder(clazz: SectionGeoJsonSchema.self) { (source: AnyObject, instance: AnyObject?) -> SectionGeoJsonSchema in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SectionGeoJsonSchema() : instance as! SectionGeoJsonSchema
            
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"] as AnyObject?)
            result.coordinates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coordinates"] as AnyObject?)
            return result
        }


        // Decoder for [SectionGeoJsonSchemaProperties]
        Decoders.addDecoder(clazz: [SectionGeoJsonSchemaProperties].self) { (source: AnyObject, instance: AnyObject?) -> [SectionGeoJsonSchemaProperties] in
            return Decoders.decode(clazz: [SectionGeoJsonSchemaProperties].self, source: source)
        }
        // Decoder for SectionGeoJsonSchemaProperties
        Decoders.addDecoder(clazz: SectionGeoJsonSchemaProperties.self) { (source: AnyObject, instance: AnyObject?) -> SectionGeoJsonSchemaProperties in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SectionGeoJsonSchemaProperties() : instance as! SectionGeoJsonSchemaProperties
            
            result.length = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["length"] as AnyObject?)
            return result
        }


        // Decoder for [Severity]
        Decoders.addDecoder(clazz: [Severity].self) { (source: AnyObject, instance: AnyObject?) -> [Severity] in
            return Decoders.decode(clazz: [Severity].self, source: source)
        }
        // Decoder for Severity
        Decoders.addDecoder(clazz: Severity.self) { (source: AnyObject, instance: AnyObject?) -> Severity in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Severity() : instance as! Severity
            
            result.color = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["color"] as AnyObject?)
            result.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            if let effect = sourceDictionary["effect"] as? String { 
                result.effect = Severity.Effect(rawValue: (effect))
            }
            
            return result
        }


        // Decoder for [Stands]
        Decoders.addDecoder(clazz: [Stands].self) { (source: AnyObject, instance: AnyObject?) -> [Stands] in
            return Decoders.decode(clazz: [Stands].self, source: source)
        }
        // Decoder for Stands
        Decoders.addDecoder(clazz: Stands.self) { (source: AnyObject, instance: AnyObject?) -> Stands in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Stands() : instance as! Stands
            
            if let status = sourceDictionary["status"] as? String { 
                result.status = Stands.Status(rawValue: (status))
            }
            
            result.availablePlaces = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["available_places"] as AnyObject?)
            result.availableBikes = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["available_bikes"] as AnyObject?)
            result.totalStands = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_stands"] as AnyObject?)
            return result
        }


        // Decoder for [StopArea]
        Decoders.addDecoder(clazz: [StopArea].self) { (source: AnyObject, instance: AnyObject?) -> [StopArea] in
            return Decoders.decode(clazz: [StopArea].self, source: source)
        }
        // Decoder for StopArea
        Decoders.addDecoder(clazz: StopArea.self) { (source: AnyObject, instance: AnyObject?) -> StopArea in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StopArea() : instance as! StopArea
            
            result.comment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comment"] as AnyObject?)
            result.codes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codes"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.physicalModes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["physical_modes"] as AnyObject?)
            result.comments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["comments"] as AnyObject?)
            result.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            result.commercialModes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["commercial_modes"] as AnyObject?)
            result.coord = Decoders.decodeOptional(clazz: Coord.self, source: sourceDictionary["coord"] as AnyObject?)
            result.administrativeRegions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["administrative_regions"] as AnyObject?)
            result.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"] as AnyObject?)
            result.stopPoints = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["stop_points"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [StopAreaEquipments]
        Decoders.addDecoder(clazz: [StopAreaEquipments].self) { (source: AnyObject, instance: AnyObject?) -> [StopAreaEquipments] in
            return Decoders.decode(clazz: [StopAreaEquipments].self, source: source)
        }
        // Decoder for StopAreaEquipments
        Decoders.addDecoder(clazz: StopAreaEquipments.self) { (source: AnyObject, instance: AnyObject?) -> StopAreaEquipments in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StopAreaEquipments() : instance as! StopAreaEquipments
            
            result.stopArea = Decoders.decodeOptional(clazz: StopArea.self, source: sourceDictionary["stop_area"] as AnyObject?)
            result.equipmentDetails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["equipment_details"] as AnyObject?)
            return result
        }


        // Decoder for [StopAreas]
        Decoders.addDecoder(clazz: [StopAreas].self) { (source: AnyObject, instance: AnyObject?) -> [StopAreas] in
            return Decoders.decode(clazz: [StopAreas].self, source: source)
        }
        // Decoder for StopAreas
        Decoders.addDecoder(clazz: StopAreas.self) { (source: AnyObject, instance: AnyObject?) -> StopAreas in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StopAreas() : instance as! StopAreas
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.stopAreas = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["stop_areas"] as AnyObject?)
            return result
        }


        // Decoder for [StopDateTime]
        Decoders.addDecoder(clazz: [StopDateTime].self) { (source: AnyObject, instance: AnyObject?) -> [StopDateTime] in
            return Decoders.decode(clazz: [StopDateTime].self, source: source)
        }
        // Decoder for StopDateTime
        Decoders.addDecoder(clazz: StopDateTime.self) { (source: AnyObject, instance: AnyObject?) -> StopDateTime in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StopDateTime() : instance as! StopDateTime
            
            result.stopPoint = Decoders.decodeOptional(clazz: StopPoint.self, source: sourceDictionary["stop_point"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.arrivalDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrival_date_time"] as AnyObject?)
            if let additionalInformations = sourceDictionary["additional_informations"] as? [String] { 
                result.additionalInformations  = additionalInformations.map ({ StopDateTime.AdditionalInformations(rawValue: $0)! })
            }
            
            result.departureDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_date_time"] as AnyObject?)
            result.baseArrivalDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["base_arrival_date_time"] as AnyObject?)
            result.baseDepartureDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["base_departure_date_time"] as AnyObject?)
            if let dataFreshness = sourceDictionary["data_freshness"] as? String { 
                result.dataFreshness = StopDateTime.DataFreshness(rawValue: (dataFreshness))
            }
            
            return result
        }


        // Decoder for [StopPoint]
        Decoders.addDecoder(clazz: [StopPoint].self) { (source: AnyObject, instance: AnyObject?) -> [StopPoint] in
            return Decoders.decode(clazz: [StopPoint].self, source: source)
        }
        // Decoder for StopPoint
        Decoders.addDecoder(clazz: StopPoint.self) { (source: AnyObject, instance: AnyObject?) -> StopPoint in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StopPoint() : instance as! StopPoint
            
            result.comment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comment"] as AnyObject?)
            result.commercialModes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["commercial_modes"] as AnyObject?)
            result.stopArea = Decoders.decodeOptional(clazz: StopArea.self, source: sourceDictionary["stop_area"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.administrativeRegions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["administrative_regions"] as AnyObject?)
            result.physicalModes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["physical_modes"] as AnyObject?)
            result.comments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["comments"] as AnyObject?)
            result.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            if let equipments = sourceDictionary["equipments"] as? [String] { 
                result.equipments  = equipments.map ({ StopPoint.Equipments(rawValue: $0)! })
            }
            
            result.codes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codes"] as AnyObject?)
            result.coord = Decoders.decodeOptional(clazz: Coord.self, source: sourceDictionary["coord"] as AnyObject?)
            result.equipmentDetails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["equipment_details"] as AnyObject?)
            result.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"] as AnyObject?)
            result.fareZone = Decoders.decodeOptional(clazz: FareZone.self, source: sourceDictionary["fare_zone"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [StopPoints]
        Decoders.addDecoder(clazz: [StopPoints].self) { (source: AnyObject, instance: AnyObject?) -> [StopPoints] in
            return Decoders.decode(clazz: [StopPoints].self, source: source)
        }
        // Decoder for StopPoints
        Decoders.addDecoder(clazz: StopPoints.self) { (source: AnyObject, instance: AnyObject?) -> StopPoints in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StopPoints() : instance as! StopPoints
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.stopPoints = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["stop_points"] as AnyObject?)
            return result
        }


        // Decoder for [StopSchedule]
        Decoders.addDecoder(clazz: [StopSchedule].self) { (source: AnyObject, instance: AnyObject?) -> [StopSchedule] in
            return Decoders.decode(clazz: [StopSchedule].self, source: source)
        }
        // Decoder for StopSchedule
        Decoders.addDecoder(clazz: StopSchedule.self) { (source: AnyObject, instance: AnyObject?) -> StopSchedule in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StopSchedule() : instance as! StopSchedule
            
            result.stopPoint = Decoders.decodeOptional(clazz: StopPoint.self, source: sourceDictionary["stop_point"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.dateTimes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["date_times"] as AnyObject?)
            result.route = Decoders.decodeOptional(clazz: Route.self, source: sourceDictionary["route"] as AnyObject?)
            result.additionalInformations = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additional_informations"] as AnyObject?)
            result.displayInformations = Decoders.decodeOptional(clazz: RouteDisplayInformation.self, source: sourceDictionary["display_informations"] as AnyObject?)
            result.lastDatetime = Decoders.decodeOptional(clazz: DateTimeType.self, source: sourceDictionary["last_datetime"] as AnyObject?)
            result.firstDatetime = Decoders.decodeOptional(clazz: DateTimeType.self, source: sourceDictionary["first_datetime"] as AnyObject?)
            return result
        }


        // Decoder for [StopSchedules]
        Decoders.addDecoder(clazz: [StopSchedules].self) { (source: AnyObject, instance: AnyObject?) -> [StopSchedules] in
            return Decoders.decode(clazz: [StopSchedules].self, source: source)
        }
        // Decoder for StopSchedules
        Decoders.addDecoder(clazz: StopSchedules.self) { (source: AnyObject, instance: AnyObject?) -> StopSchedules in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StopSchedules() : instance as! StopSchedules
            
            result.stopSchedules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["stop_schedules"] as AnyObject?)
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.exceptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["exceptions"] as AnyObject?)
            return result
        }


        // Decoder for [StopTime]
        Decoders.addDecoder(clazz: [StopTime].self) { (source: AnyObject, instance: AnyObject?) -> [StopTime] in
            return Decoders.decode(clazz: [StopTime].self, source: source)
        }
        // Decoder for StopTime
        Decoders.addDecoder(clazz: StopTime.self) { (source: AnyObject, instance: AnyObject?) -> StopTime in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? StopTime() : instance as! StopTime
            
            result.stopPoint = Decoders.decodeOptional(clazz: StopPoint.self, source: sourceDictionary["stop_point"] as AnyObject?)
            result.utcArrivalTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["utc_arrival_time"] as AnyObject?)
            result.utcDepartureTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["utc_departure_time"] as AnyObject?)
            result.headsign = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["headsign"] as AnyObject?)
            result.arrivalTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrival_time"] as AnyObject?)
            result.journeyPatternPoint = Decoders.decodeOptional(clazz: JourneyPatternPoint.self, source: sourceDictionary["journey_pattern_point"] as AnyObject?)
            result.dropOffAllowed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["drop_off_allowed"] as AnyObject?)
            result.pickupAllowed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["pickup_allowed"] as AnyObject?)
            result.departureTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_time"] as AnyObject?)
            return result
        }


        // Decoder for [Table]
        Decoders.addDecoder(clazz: [Table].self) { (source: AnyObject, instance: AnyObject?) -> [Table] in
            return Decoders.decode(clazz: [Table].self, source: source)
        }
        // Decoder for Table
        Decoders.addDecoder(clazz: Table.self) { (source: AnyObject, instance: AnyObject?) -> Table in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Table() : instance as! Table
            
            result.headers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["headers"] as AnyObject?)
            result.rows = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["rows"] as AnyObject?)
            return result
        }


        // Decoder for [Ticket]
        Decoders.addDecoder(clazz: [Ticket].self) { (source: AnyObject, instance: AnyObject?) -> [Ticket] in
            return Decoders.decode(clazz: [Ticket].self, source: source)
        }
        // Decoder for Ticket
        Decoders.addDecoder(clazz: Ticket.self) { (source: AnyObject, instance: AnyObject?) -> Ticket in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Ticket() : instance as! Ticket
            
            result.comment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comment"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.cost = Decoders.decodeOptional(clazz: Cost.self, source: sourceDictionary["cost"] as AnyObject?)
            result.sourceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source_id"] as AnyObject?)
            result.found = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["found"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return result
        }


        // Decoder for [TrafficReport]
        Decoders.addDecoder(clazz: [TrafficReport].self) { (source: AnyObject, instance: AnyObject?) -> [TrafficReport] in
            return Decoders.decode(clazz: [TrafficReport].self, source: source)
        }
        // Decoder for TrafficReport
        Decoders.addDecoder(clazz: TrafficReport.self) { (source: AnyObject, instance: AnyObject?) -> TrafficReport in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TrafficReport() : instance as! TrafficReport
            
            result.vehicleJourneys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicle_journeys"] as AnyObject?)
            result.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            result.network = Decoders.decodeOptional(clazz: Network.self, source: sourceDictionary["network"] as AnyObject?)
            result.stopAreas = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["stop_areas"] as AnyObject?)
            return result
        }


        // Decoder for [TrafficReports]
        Decoders.addDecoder(clazz: [TrafficReports].self) { (source: AnyObject, instance: AnyObject?) -> [TrafficReports] in
            return Decoders.decode(clazz: [TrafficReports].self, source: source)
        }
        // Decoder for TrafficReports
        Decoders.addDecoder(clazz: TrafficReports.self) { (source: AnyObject, instance: AnyObject?) -> TrafficReports in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? TrafficReports() : instance as! TrafficReports
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.trafficReports = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["traffic_reports"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            return result
        }


        // Decoder for [Trip]
        Decoders.addDecoder(clazz: [Trip].self) { (source: AnyObject, instance: AnyObject?) -> [Trip] in
            return Decoders.decode(clazz: [Trip].self, source: source)
        }
        // Decoder for Trip
        Decoders.addDecoder(clazz: Trip.self) { (source: AnyObject, instance: AnyObject?) -> Trip in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Trip() : instance as! Trip
            
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [Trips]
        Decoders.addDecoder(clazz: [Trips].self) { (source: AnyObject, instance: AnyObject?) -> [Trips] in
            return Decoders.decode(clazz: [Trips].self, source: source)
        }
        // Decoder for Trips
        Decoders.addDecoder(clazz: Trips.self) { (source: AnyObject, instance: AnyObject?) -> Trips in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Trips() : instance as! Trips
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.trips = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["trips"] as AnyObject?)
            return result
        }


        // Decoder for [VJDisplayInformation]
        Decoders.addDecoder(clazz: [VJDisplayInformation].self) { (source: AnyObject, instance: AnyObject?) -> [VJDisplayInformation] in
            return Decoders.decode(clazz: [VJDisplayInformation].self, source: source)
        }
        // Decoder for VJDisplayInformation
        Decoders.addDecoder(clazz: VJDisplayInformation.self) { (source: AnyObject, instance: AnyObject?) -> VJDisplayInformation in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? VJDisplayInformation() : instance as! VJDisplayInformation
            
            result.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"] as AnyObject?)
            result.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            result.network = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["network"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.color = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["color"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.physicalMode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["physical_mode"] as AnyObject?)
            result.headsign = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["headsign"] as AnyObject?)
            result.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            if let equipments = sourceDictionary["equipments"] as? [String] { 
                result.equipments  = equipments.map ({ VJDisplayInformation.Equipments(rawValue: $0)! })
            }
            
            result.textColor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text_color"] as AnyObject?)
            result.headsigns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["headsigns"] as AnyObject?)
            result.commercialMode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commercial_mode"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            return result
        }


        // Decoder for [ValidityPattern]
        Decoders.addDecoder(clazz: [ValidityPattern].self) { (source: AnyObject, instance: AnyObject?) -> [ValidityPattern] in
            return Decoders.decode(clazz: [ValidityPattern].self, source: source)
        }
        // Decoder for ValidityPattern
        Decoders.addDecoder(clazz: ValidityPattern.self) { (source: AnyObject, instance: AnyObject?) -> ValidityPattern in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ValidityPattern() : instance as! ValidityPattern
            
            result.beginningDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["beginning_date"] as AnyObject?)
            result.days = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["days"] as AnyObject?)
            return result
        }


        // Decoder for [VehicleJourney]
        Decoders.addDecoder(clazz: [VehicleJourney].self) { (source: AnyObject, instance: AnyObject?) -> [VehicleJourney] in
            return Decoders.decode(clazz: [VehicleJourney].self, source: source)
        }
        // Decoder for VehicleJourney
        Decoders.addDecoder(clazz: VehicleJourney.self) { (source: AnyObject, instance: AnyObject?) -> VehicleJourney in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? VehicleJourney() : instance as! VehicleJourney
            
            result.comment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comment"] as AnyObject?)
            result.codes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codes"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.journeyPattern = Decoders.decodeOptional(clazz: JourneyPattern.self, source: sourceDictionary["journey_pattern"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_time"] as AnyObject?)
            result.headwaySecs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["headway_secs"] as AnyObject?)
            result.stopTimes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["stop_times"] as AnyObject?)
            result.comments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["comments"] as AnyObject?)
            result.validityPattern = Decoders.decodeOptional(clazz: ValidityPattern.self, source: sourceDictionary["validity_pattern"] as AnyObject?)
            result.endTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["end_time"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.trip = Decoders.decodeOptional(clazz: Trip.self, source: sourceDictionary["trip"] as AnyObject?)
            result.calendars = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["calendars"] as AnyObject?)
            return result
        }


        // Decoder for [VehicleJourneys]
        Decoders.addDecoder(clazz: [VehicleJourneys].self) { (source: AnyObject, instance: AnyObject?) -> [VehicleJourneys] in
            return Decoders.decode(clazz: [VehicleJourneys].self, source: source)
        }
        // Decoder for VehicleJourneys
        Decoders.addDecoder(clazz: VehicleJourneys.self) { (source: AnyObject, instance: AnyObject?) -> VehicleJourneys in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? VehicleJourneys() : instance as! VehicleJourneys
            
            result.pagination = Decoders.decodeOptional(clazz: Pagination.self, source: sourceDictionary["pagination"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"] as AnyObject?)
            result.disruptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disruptions"] as AnyObject?)
            result.notes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notes"] as AnyObject?)
            result.feedPublishers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["feed_publishers"] as AnyObject?)
            result.context = Decoders.decodeOptional(clazz: Context.self, source: sourceDictionary["context"] as AnyObject?)
            result.error = Decoders.decodeOptional(clazz: ModelError.self, source: sourceDictionary["error"] as AnyObject?)
            result.vehicleJourneys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["vehicle_journeys"] as AnyObject?)
            return result
        }


        // Decoder for [WeekPattern]
        Decoders.addDecoder(clazz: [WeekPattern].self) { (source: AnyObject, instance: AnyObject?) -> [WeekPattern] in
            return Decoders.decode(clazz: [WeekPattern].self, source: source)
        }
        // Decoder for WeekPattern
        Decoders.addDecoder(clazz: WeekPattern.self) { (source: AnyObject, instance: AnyObject?) -> WeekPattern in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? WeekPattern() : instance as! WeekPattern
            
            result.monday = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["monday"] as AnyObject?)
            result.tuesday = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tuesday"] as AnyObject?)
            result.friday = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["friday"] as AnyObject?)
            result.wednesday = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wednesday"] as AnyObject?)
            result.thursday = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["thursday"] as AnyObject?)
            result.sunday = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sunday"] as AnyObject?)
            result.saturday = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["saturday"] as AnyObject?)
            return result
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
