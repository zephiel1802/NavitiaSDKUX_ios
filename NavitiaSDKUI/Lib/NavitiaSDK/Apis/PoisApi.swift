//
// PoisApi.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class CoverageLonLatPoisRequestBuilder: NSObject {
    let currentApi: PoisApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter addPoiInfos
    */
    public enum AddPoiInfos: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }
    var lat:Double? = nil
    var lon:Double? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var dataFreshness: DataFreshness? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil
    var disableDisruption:Bool? = nil
    var filter:String? = nil
    var tags:[String]? = nil
    var originalId:String? = nil
    var bssStands:Bool? = nil
    var addPoiInfos: [String]? = nil
    var debugURL: String? = nil

    public init(currentApi: PoisApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double?) -> CoverageLonLatPoisRequestBuilder {
        self.lat = lat
        
        return self
    }
    open func withLon(_ lon: Double?) -> CoverageLonLatPoisRequestBuilder {
        self.lon = lon
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageLonLatPoisRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageLonLatPoisRequestBuilder {
        self.count = count
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageLonLatPoisRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]?) -> CoverageLonLatPoisRequestBuilder {
        self.forbiddenId = forbiddenId
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageLonLatPoisRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }
    open func withExternalCode(_ externalCode: String?) -> CoverageLonLatPoisRequestBuilder {
        self.externalCode = externalCode
        
        return self
    }
    open func withHeadsign(_ headsign: String?) -> CoverageLonLatPoisRequestBuilder {
        self.headsign = headsign
        
        return self
    }
    open func withShowCodes(_ showCodes: Bool?) -> CoverageLonLatPoisRequestBuilder {
        self.showCodes = showCodes
        
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel?) -> CoverageLonLatPoisRequestBuilder {
        self.odtLevel = odtLevel

        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness?) -> CoverageLonLatPoisRequestBuilder {
        self.dataFreshness = dataFreshness

        return self
    }
    open func withDistance(_ distance: Int32?) -> CoverageLonLatPoisRequestBuilder {
        self.distance = distance
        
        return self
    }
    open func withSince(_ since: Date?) -> CoverageLonLatPoisRequestBuilder {
        self.since = since
        
        return self
    }
    open func withUntil(_ until: Date?) -> CoverageLonLatPoisRequestBuilder {
        self.until = until
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageLonLatPoisRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }
    open func withDisableDisruption(_ disableDisruption: Bool?) -> CoverageLonLatPoisRequestBuilder {
        self.disableDisruption = disableDisruption
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoverageLonLatPoisRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withTags(_ tags: [String]?) -> CoverageLonLatPoisRequestBuilder {
        self.tags = tags
        
        return self
    }
    open func withOriginalId(_ originalId: String?) -> CoverageLonLatPoisRequestBuilder {
        self.originalId = originalId
        
        return self
    }
    open func withBssStands(_ bssStands: Bool?) -> CoverageLonLatPoisRequestBuilder {
        self.bssStands = bssStands
        
        return self
    }
    open func withAddPoiInfos(_ addPoiInfos: [AddPoiInfos]?) -> CoverageLonLatPoisRequestBuilder {
        guard let addPoiInfos = addPoiInfos else {
            return self
        }
        
        var items = [String]()
        for item in addPoiInfos {
            items.append(item.rawValue)
        }
        self.addPoiInfos = items

        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageLonLatPoisRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/pois"

        if let lat = lat {
            let latPreEscape: String = "\(lat)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if let lon = lon {
            let lonPreEscape: String = "\(lon)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "disable_disruption": self.disableDisruption, 
            "filter": self.filter, 
            "tags[]": self.tags, 
            "original_id": self.originalId, 
            "bss_stands": self.bssStands, 
            "add_poi_infos[]": self.addPoiInfos
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Pois?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Pois>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatPoisIdRequestBuilder: NSObject {
    let currentApi: PoisApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter addPoiInfos
    */
    public enum AddPoiInfos: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }
    var lat:Double? = nil
    var lon:Double? = nil
    var id:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var dataFreshness: DataFreshness? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil
    var disableDisruption:Bool? = nil
    var tags:[String]? = nil
    var originalId:String? = nil
    var bssStands:Bool? = nil
    var addPoiInfos: [String]? = nil
    var debugURL: String? = nil

    public init(currentApi: PoisApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double?) -> CoverageLonLatPoisIdRequestBuilder {
        self.lat = lat
        
        return self
    }
    open func withLon(_ lon: Double?) -> CoverageLonLatPoisIdRequestBuilder {
        self.lon = lon
        
        return self
    }
    open func withId(_ id: String?) -> CoverageLonLatPoisIdRequestBuilder {
        self.id = id
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageLonLatPoisIdRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageLonLatPoisIdRequestBuilder {
        self.count = count
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageLonLatPoisIdRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]?) -> CoverageLonLatPoisIdRequestBuilder {
        self.forbiddenId = forbiddenId
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageLonLatPoisIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }
    open func withExternalCode(_ externalCode: String?) -> CoverageLonLatPoisIdRequestBuilder {
        self.externalCode = externalCode
        
        return self
    }
    open func withHeadsign(_ headsign: String?) -> CoverageLonLatPoisIdRequestBuilder {
        self.headsign = headsign
        
        return self
    }
    open func withShowCodes(_ showCodes: Bool?) -> CoverageLonLatPoisIdRequestBuilder {
        self.showCodes = showCodes
        
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel?) -> CoverageLonLatPoisIdRequestBuilder {
        self.odtLevel = odtLevel

        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness?) -> CoverageLonLatPoisIdRequestBuilder {
        self.dataFreshness = dataFreshness

        return self
    }
    open func withDistance(_ distance: Int32?) -> CoverageLonLatPoisIdRequestBuilder {
        self.distance = distance
        
        return self
    }
    open func withSince(_ since: Date?) -> CoverageLonLatPoisIdRequestBuilder {
        self.since = since
        
        return self
    }
    open func withUntil(_ until: Date?) -> CoverageLonLatPoisIdRequestBuilder {
        self.until = until
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageLonLatPoisIdRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }
    open func withDisableDisruption(_ disableDisruption: Bool?) -> CoverageLonLatPoisIdRequestBuilder {
        self.disableDisruption = disableDisruption
        
        return self
    }
    open func withTags(_ tags: [String]?) -> CoverageLonLatPoisIdRequestBuilder {
        self.tags = tags
        
        return self
    }
    open func withOriginalId(_ originalId: String?) -> CoverageLonLatPoisIdRequestBuilder {
        self.originalId = originalId
        
        return self
    }
    open func withBssStands(_ bssStands: Bool?) -> CoverageLonLatPoisIdRequestBuilder {
        self.bssStands = bssStands
        
        return self
    }
    open func withAddPoiInfos(_ addPoiInfos: [AddPoiInfos]?) -> CoverageLonLatPoisIdRequestBuilder {
        guard let addPoiInfos = addPoiInfos else {
            return self
        }
        
        var items = [String]()
        for item in addPoiInfos {
            items.append(item.rawValue)
        }
        self.addPoiInfos = items

        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageLonLatPoisIdRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/pois/{id}"

        if let lat = lat {
            let latPreEscape: String = "\(lat)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if let lon = lon {
            let lonPreEscape: String = "\(lon)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        if let id = id {
            let idPreEscape: String = "\(id)"
            let idPostEscape: String = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "disable_disruption": self.disableDisruption, 
            "tags[]": self.tags, 
            "original_id": self.originalId, 
            "bss_stands": self.bssStands, 
            "add_poi_infos[]": self.addPoiInfos
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Pois?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Pois>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatUriPoisRequestBuilder: NSObject {
    let currentApi: PoisApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter addPoiInfos
    */
    public enum AddPoiInfos: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }
    var lat:Double? = nil
    var lon:Double? = nil
    var uri:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var dataFreshness: DataFreshness? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil
    var disableDisruption:Bool? = nil
    var filter:String? = nil
    var tags:[String]? = nil
    var originalId:String? = nil
    var bssStands:Bool? = nil
    var addPoiInfos: [String]? = nil
    var debugURL: String? = nil

    public init(currentApi: PoisApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double?) -> CoverageLonLatUriPoisRequestBuilder {
        self.lat = lat
        
        return self
    }
    open func withLon(_ lon: Double?) -> CoverageLonLatUriPoisRequestBuilder {
        self.lon = lon
        
        return self
    }
    open func withUri(_ uri: String?) -> CoverageLonLatUriPoisRequestBuilder {
        self.uri = uri
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageLonLatUriPoisRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageLonLatUriPoisRequestBuilder {
        self.count = count
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageLonLatUriPoisRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]?) -> CoverageLonLatUriPoisRequestBuilder {
        self.forbiddenId = forbiddenId
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageLonLatUriPoisRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }
    open func withExternalCode(_ externalCode: String?) -> CoverageLonLatUriPoisRequestBuilder {
        self.externalCode = externalCode
        
        return self
    }
    open func withHeadsign(_ headsign: String?) -> CoverageLonLatUriPoisRequestBuilder {
        self.headsign = headsign
        
        return self
    }
    open func withShowCodes(_ showCodes: Bool?) -> CoverageLonLatUriPoisRequestBuilder {
        self.showCodes = showCodes
        
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel?) -> CoverageLonLatUriPoisRequestBuilder {
        self.odtLevel = odtLevel

        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness?) -> CoverageLonLatUriPoisRequestBuilder {
        self.dataFreshness = dataFreshness

        return self
    }
    open func withDistance(_ distance: Int32?) -> CoverageLonLatUriPoisRequestBuilder {
        self.distance = distance
        
        return self
    }
    open func withSince(_ since: Date?) -> CoverageLonLatUriPoisRequestBuilder {
        self.since = since
        
        return self
    }
    open func withUntil(_ until: Date?) -> CoverageLonLatUriPoisRequestBuilder {
        self.until = until
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageLonLatUriPoisRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }
    open func withDisableDisruption(_ disableDisruption: Bool?) -> CoverageLonLatUriPoisRequestBuilder {
        self.disableDisruption = disableDisruption
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoverageLonLatUriPoisRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withTags(_ tags: [String]?) -> CoverageLonLatUriPoisRequestBuilder {
        self.tags = tags
        
        return self
    }
    open func withOriginalId(_ originalId: String?) -> CoverageLonLatUriPoisRequestBuilder {
        self.originalId = originalId
        
        return self
    }
    open func withBssStands(_ bssStands: Bool?) -> CoverageLonLatUriPoisRequestBuilder {
        self.bssStands = bssStands
        
        return self
    }
    open func withAddPoiInfos(_ addPoiInfos: [AddPoiInfos]?) -> CoverageLonLatUriPoisRequestBuilder {
        guard let addPoiInfos = addPoiInfos else {
            return self
        }
        
        var items = [String]()
        for item in addPoiInfos {
            items.append(item.rawValue)
        }
        self.addPoiInfos = items

        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageLonLatUriPoisRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/{uri}/pois"

        if let lat = lat {
            let latPreEscape: String = "\(lat)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if let lon = lon {
            let lonPreEscape: String = "\(lon)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        if let uri = uri {
            let uriPreEscape: String = "\(uri)"
            let uriPostEscape: String = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "disable_disruption": self.disableDisruption, 
            "filter": self.filter, 
            "tags[]": self.tags, 
            "original_id": self.originalId, 
            "bss_stands": self.bssStands, 
            "add_poi_infos[]": self.addPoiInfos
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Pois?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Pois>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatUriPoisIdRequestBuilder: NSObject {
    let currentApi: PoisApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter addPoiInfos
    */
    public enum AddPoiInfos: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }
    var lat:Double? = nil
    var lon:Double? = nil
    var uri:String? = nil
    var id:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var dataFreshness: DataFreshness? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil
    var disableDisruption:Bool? = nil
    var tags:[String]? = nil
    var originalId:String? = nil
    var bssStands:Bool? = nil
    var addPoiInfos: [String]? = nil
    var debugURL: String? = nil

    public init(currentApi: PoisApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.lat = lat
        
        return self
    }
    open func withLon(_ lon: Double?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.lon = lon
        
        return self
    }
    open func withUri(_ uri: String?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.uri = uri
        
        return self
    }
    open func withId(_ id: String?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.id = id
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.count = count
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.forbiddenId = forbiddenId
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }
    open func withExternalCode(_ externalCode: String?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.externalCode = externalCode
        
        return self
    }
    open func withHeadsign(_ headsign: String?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.headsign = headsign
        
        return self
    }
    open func withShowCodes(_ showCodes: Bool?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.showCodes = showCodes
        
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.odtLevel = odtLevel

        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.dataFreshness = dataFreshness

        return self
    }
    open func withDistance(_ distance: Int32?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.distance = distance
        
        return self
    }
    open func withSince(_ since: Date?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.since = since
        
        return self
    }
    open func withUntil(_ until: Date?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.until = until
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }
    open func withDisableDisruption(_ disableDisruption: Bool?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.disableDisruption = disableDisruption
        
        return self
    }
    open func withTags(_ tags: [String]?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.tags = tags
        
        return self
    }
    open func withOriginalId(_ originalId: String?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.originalId = originalId
        
        return self
    }
    open func withBssStands(_ bssStands: Bool?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.bssStands = bssStands
        
        return self
    }
    open func withAddPoiInfos(_ addPoiInfos: [AddPoiInfos]?) -> CoverageLonLatUriPoisIdRequestBuilder {
        guard let addPoiInfos = addPoiInfos else {
            return self
        }
        
        var items = [String]()
        for item in addPoiInfos {
            items.append(item.rawValue)
        }
        self.addPoiInfos = items

        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageLonLatUriPoisIdRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/{uri}/pois/{id}"

        if let lat = lat {
            let latPreEscape: String = "\(lat)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if let lon = lon {
            let lonPreEscape: String = "\(lon)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        if let uri = uri {
            let uriPreEscape: String = "\(uri)"
            let uriPostEscape: String = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        }

        if let id = id {
            let idPreEscape: String = "\(id)"
            let idPostEscape: String = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "disable_disruption": self.disableDisruption, 
            "tags[]": self.tags, 
            "original_id": self.originalId, 
            "bss_stands": self.bssStands, 
            "add_poi_infos[]": self.addPoiInfos
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Pois?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Pois>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionPoisRequestBuilder: NSObject {
    let currentApi: PoisApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter addPoiInfos
    */
    public enum AddPoiInfos: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }
    var region:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var dataFreshness: DataFreshness? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil
    var disableDisruption:Bool? = nil
    var filter:String? = nil
    var tags:[String]? = nil
    var originalId:String? = nil
    var bssStands:Bool? = nil
    var addPoiInfos: [String]? = nil
    var debugURL: String? = nil

    public init(currentApi: PoisApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String?) -> CoverageRegionPoisRequestBuilder {
        self.region = region
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageRegionPoisRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageRegionPoisRequestBuilder {
        self.count = count
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageRegionPoisRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]?) -> CoverageRegionPoisRequestBuilder {
        self.forbiddenId = forbiddenId
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageRegionPoisRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }
    open func withExternalCode(_ externalCode: String?) -> CoverageRegionPoisRequestBuilder {
        self.externalCode = externalCode
        
        return self
    }
    open func withHeadsign(_ headsign: String?) -> CoverageRegionPoisRequestBuilder {
        self.headsign = headsign
        
        return self
    }
    open func withShowCodes(_ showCodes: Bool?) -> CoverageRegionPoisRequestBuilder {
        self.showCodes = showCodes
        
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel?) -> CoverageRegionPoisRequestBuilder {
        self.odtLevel = odtLevel

        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness?) -> CoverageRegionPoisRequestBuilder {
        self.dataFreshness = dataFreshness

        return self
    }
    open func withDistance(_ distance: Int32?) -> CoverageRegionPoisRequestBuilder {
        self.distance = distance
        
        return self
    }
    open func withSince(_ since: Date?) -> CoverageRegionPoisRequestBuilder {
        self.since = since
        
        return self
    }
    open func withUntil(_ until: Date?) -> CoverageRegionPoisRequestBuilder {
        self.until = until
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageRegionPoisRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }
    open func withDisableDisruption(_ disableDisruption: Bool?) -> CoverageRegionPoisRequestBuilder {
        self.disableDisruption = disableDisruption
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoverageRegionPoisRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withTags(_ tags: [String]?) -> CoverageRegionPoisRequestBuilder {
        self.tags = tags
        
        return self
    }
    open func withOriginalId(_ originalId: String?) -> CoverageRegionPoisRequestBuilder {
        self.originalId = originalId
        
        return self
    }
    open func withBssStands(_ bssStands: Bool?) -> CoverageRegionPoisRequestBuilder {
        self.bssStands = bssStands
        
        return self
    }
    open func withAddPoiInfos(_ addPoiInfos: [AddPoiInfos]?) -> CoverageRegionPoisRequestBuilder {
        guard let addPoiInfos = addPoiInfos else {
            return self
        }
        
        var items = [String]()
        for item in addPoiInfos {
            items.append(item.rawValue)
        }
        self.addPoiInfos = items

        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageRegionPoisRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/pois"

        if let region = region {
            let regionPreEscape: String = "\(region)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "disable_disruption": self.disableDisruption, 
            "filter": self.filter, 
            "tags[]": self.tags, 
            "original_id": self.originalId, 
            "bss_stands": self.bssStands, 
            "add_poi_infos[]": self.addPoiInfos
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Pois?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Pois>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionPoisIdRequestBuilder: NSObject {
    let currentApi: PoisApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter addPoiInfos
    */
    public enum AddPoiInfos: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }
    var region:String? = nil
    var id:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var dataFreshness: DataFreshness? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil
    var disableDisruption:Bool? = nil
    var tags:[String]? = nil
    var originalId:String? = nil
    var bssStands:Bool? = nil
    var addPoiInfos: [String]? = nil
    var debugURL: String? = nil

    public init(currentApi: PoisApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String?) -> CoverageRegionPoisIdRequestBuilder {
        self.region = region
        
        return self
    }
    open func withId(_ id: String?) -> CoverageRegionPoisIdRequestBuilder {
        self.id = id
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageRegionPoisIdRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageRegionPoisIdRequestBuilder {
        self.count = count
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageRegionPoisIdRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]?) -> CoverageRegionPoisIdRequestBuilder {
        self.forbiddenId = forbiddenId
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageRegionPoisIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }
    open func withExternalCode(_ externalCode: String?) -> CoverageRegionPoisIdRequestBuilder {
        self.externalCode = externalCode
        
        return self
    }
    open func withHeadsign(_ headsign: String?) -> CoverageRegionPoisIdRequestBuilder {
        self.headsign = headsign
        
        return self
    }
    open func withShowCodes(_ showCodes: Bool?) -> CoverageRegionPoisIdRequestBuilder {
        self.showCodes = showCodes
        
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel?) -> CoverageRegionPoisIdRequestBuilder {
        self.odtLevel = odtLevel

        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness?) -> CoverageRegionPoisIdRequestBuilder {
        self.dataFreshness = dataFreshness

        return self
    }
    open func withDistance(_ distance: Int32?) -> CoverageRegionPoisIdRequestBuilder {
        self.distance = distance
        
        return self
    }
    open func withSince(_ since: Date?) -> CoverageRegionPoisIdRequestBuilder {
        self.since = since
        
        return self
    }
    open func withUntil(_ until: Date?) -> CoverageRegionPoisIdRequestBuilder {
        self.until = until
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageRegionPoisIdRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }
    open func withDisableDisruption(_ disableDisruption: Bool?) -> CoverageRegionPoisIdRequestBuilder {
        self.disableDisruption = disableDisruption
        
        return self
    }
    open func withTags(_ tags: [String]?) -> CoverageRegionPoisIdRequestBuilder {
        self.tags = tags
        
        return self
    }
    open func withOriginalId(_ originalId: String?) -> CoverageRegionPoisIdRequestBuilder {
        self.originalId = originalId
        
        return self
    }
    open func withBssStands(_ bssStands: Bool?) -> CoverageRegionPoisIdRequestBuilder {
        self.bssStands = bssStands
        
        return self
    }
    open func withAddPoiInfos(_ addPoiInfos: [AddPoiInfos]?) -> CoverageRegionPoisIdRequestBuilder {
        guard let addPoiInfos = addPoiInfos else {
            return self
        }
        
        var items = [String]()
        for item in addPoiInfos {
            items.append(item.rawValue)
        }
        self.addPoiInfos = items

        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageRegionPoisIdRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/pois/{id}"

        if let region = region {
            let regionPreEscape: String = "\(region)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        if let id = id {
            let idPreEscape: String = "\(id)"
            let idPostEscape: String = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "disable_disruption": self.disableDisruption, 
            "tags[]": self.tags, 
            "original_id": self.originalId, 
            "bss_stands": self.bssStands, 
            "add_poi_infos[]": self.addPoiInfos
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Pois?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Pois>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionUriPoisRequestBuilder: NSObject {
    let currentApi: PoisApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter addPoiInfos
    */
    public enum AddPoiInfos: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }
    var region:String? = nil
    var uri:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var dataFreshness: DataFreshness? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil
    var disableDisruption:Bool? = nil
    var filter:String? = nil
    var tags:[String]? = nil
    var originalId:String? = nil
    var bssStands:Bool? = nil
    var addPoiInfos: [String]? = nil
    var debugURL: String? = nil

    public init(currentApi: PoisApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String?) -> CoverageRegionUriPoisRequestBuilder {
        self.region = region
        
        return self
    }
    open func withUri(_ uri: String?) -> CoverageRegionUriPoisRequestBuilder {
        self.uri = uri
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageRegionUriPoisRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageRegionUriPoisRequestBuilder {
        self.count = count
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageRegionUriPoisRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]?) -> CoverageRegionUriPoisRequestBuilder {
        self.forbiddenId = forbiddenId
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageRegionUriPoisRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }
    open func withExternalCode(_ externalCode: String?) -> CoverageRegionUriPoisRequestBuilder {
        self.externalCode = externalCode
        
        return self
    }
    open func withHeadsign(_ headsign: String?) -> CoverageRegionUriPoisRequestBuilder {
        self.headsign = headsign
        
        return self
    }
    open func withShowCodes(_ showCodes: Bool?) -> CoverageRegionUriPoisRequestBuilder {
        self.showCodes = showCodes
        
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel?) -> CoverageRegionUriPoisRequestBuilder {
        self.odtLevel = odtLevel

        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness?) -> CoverageRegionUriPoisRequestBuilder {
        self.dataFreshness = dataFreshness

        return self
    }
    open func withDistance(_ distance: Int32?) -> CoverageRegionUriPoisRequestBuilder {
        self.distance = distance
        
        return self
    }
    open func withSince(_ since: Date?) -> CoverageRegionUriPoisRequestBuilder {
        self.since = since
        
        return self
    }
    open func withUntil(_ until: Date?) -> CoverageRegionUriPoisRequestBuilder {
        self.until = until
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageRegionUriPoisRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }
    open func withDisableDisruption(_ disableDisruption: Bool?) -> CoverageRegionUriPoisRequestBuilder {
        self.disableDisruption = disableDisruption
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoverageRegionUriPoisRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withTags(_ tags: [String]?) -> CoverageRegionUriPoisRequestBuilder {
        self.tags = tags
        
        return self
    }
    open func withOriginalId(_ originalId: String?) -> CoverageRegionUriPoisRequestBuilder {
        self.originalId = originalId
        
        return self
    }
    open func withBssStands(_ bssStands: Bool?) -> CoverageRegionUriPoisRequestBuilder {
        self.bssStands = bssStands
        
        return self
    }
    open func withAddPoiInfos(_ addPoiInfos: [AddPoiInfos]?) -> CoverageRegionUriPoisRequestBuilder {
        guard let addPoiInfos = addPoiInfos else {
            return self
        }
        
        var items = [String]()
        for item in addPoiInfos {
            items.append(item.rawValue)
        }
        self.addPoiInfos = items

        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageRegionUriPoisRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/{uri}/pois"

        if let region = region {
            let regionPreEscape: String = "\(region)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        if let uri = uri {
            let uriPreEscape: String = "\(uri)"
            let uriPostEscape: String = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "disable_disruption": self.disableDisruption, 
            "filter": self.filter, 
            "tags[]": self.tags, 
            "original_id": self.originalId, 
            "bss_stands": self.bssStands, 
            "add_poi_infos[]": self.addPoiInfos
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Pois?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Pois>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionUriPoisIdRequestBuilder: NSObject {
    let currentApi: PoisApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter addPoiInfos
    */
    public enum AddPoiInfos: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }
    var region:String? = nil
    var uri:String? = nil
    var id:String? = nil
    var startPage:Int32? = nil
    var count:Int32? = nil
    var depth:Int32? = nil
    var forbiddenId:[String]? = nil
    var forbiddenUris:[String]? = nil
    var externalCode:String? = nil
    var headsign:String? = nil
    var showCodes:Bool? = nil
    var odtLevel: OdtLevel? = nil
    var dataFreshness: DataFreshness? = nil
    var distance:Int32? = nil
    var since:Date? = nil
    var until:Date? = nil
    var disableGeojson:Bool? = nil
    var disableDisruption:Bool? = nil
    var tags:[String]? = nil
    var originalId:String? = nil
    var bssStands:Bool? = nil
    var addPoiInfos: [String]? = nil
    var debugURL: String? = nil

    public init(currentApi: PoisApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.region = region
        
        return self
    }
    open func withUri(_ uri: String?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.uri = uri
        
        return self
    }
    open func withId(_ id: String?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.id = id
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.count = count
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.forbiddenId = forbiddenId
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }
    open func withExternalCode(_ externalCode: String?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.externalCode = externalCode
        
        return self
    }
    open func withHeadsign(_ headsign: String?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.headsign = headsign
        
        return self
    }
    open func withShowCodes(_ showCodes: Bool?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.showCodes = showCodes
        
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.odtLevel = odtLevel

        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.dataFreshness = dataFreshness

        return self
    }
    open func withDistance(_ distance: Int32?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.distance = distance
        
        return self
    }
    open func withSince(_ since: Date?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.since = since
        
        return self
    }
    open func withUntil(_ until: Date?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.until = until
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }
    open func withDisableDisruption(_ disableDisruption: Bool?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.disableDisruption = disableDisruption
        
        return self
    }
    open func withTags(_ tags: [String]?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.tags = tags
        
        return self
    }
    open func withOriginalId(_ originalId: String?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.originalId = originalId
        
        return self
    }
    open func withBssStands(_ bssStands: Bool?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.bssStands = bssStands
        
        return self
    }
    open func withAddPoiInfos(_ addPoiInfos: [AddPoiInfos]?) -> CoverageRegionUriPoisIdRequestBuilder {
        guard let addPoiInfos = addPoiInfos else {
            return self
        }
        
        var items = [String]()
        for item in addPoiInfos {
            items.append(item.rawValue)
        }
        self.addPoiInfos = items

        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageRegionUriPoisIdRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/{uri}/pois/{id}"

        if let region = region {
            let regionPreEscape: String = "\(region)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        if let uri = uri {
            let uriPreEscape: String = "\(uri)"
            let uriPostEscape: String = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        }

        if let id = id {
            let idPreEscape: String = "\(id)"
            let idPostEscape: String = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "disable_disruption": self.disableDisruption, 
            "tags[]": self.tags, 
            "original_id": self.originalId, 
            "bss_stands": self.bssStands, 
            "add_poi_infos[]": self.addPoiInfos
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Pois?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Pois>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}



open class PoisApi: APIBase {
    let token: String

    public init(token: String) {
        self.token = token
    }

    public func newCoverageLonLatPoisRequestBuilder() -> CoverageLonLatPoisRequestBuilder {
        return CoverageLonLatPoisRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatPoisIdRequestBuilder() -> CoverageLonLatPoisIdRequestBuilder {
        return CoverageLonLatPoisIdRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatUriPoisRequestBuilder() -> CoverageLonLatUriPoisRequestBuilder {
        return CoverageLonLatUriPoisRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatUriPoisIdRequestBuilder() -> CoverageLonLatUriPoisIdRequestBuilder {
        return CoverageLonLatUriPoisIdRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionPoisRequestBuilder() -> CoverageRegionPoisRequestBuilder {
        return CoverageRegionPoisRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionPoisIdRequestBuilder() -> CoverageRegionPoisIdRequestBuilder {
        return CoverageRegionPoisIdRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionUriPoisRequestBuilder() -> CoverageRegionUriPoisRequestBuilder {
        return CoverageRegionUriPoisRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionUriPoisIdRequestBuilder() -> CoverageRegionUriPoisIdRequestBuilder {
        return CoverageRegionUriPoisIdRequestBuilder(currentApi: self)
    }
}
