//
// PlacesApi.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//
import Foundation

open class CoverageLonLatPlacesRequestBuilder: NSObject {
    let currentApi: PlacesApi
    
    /**
     * enum for parameter type
     */
    public enum ModelType: String {
        case stopPoint = "stop_point"
        case poi = "poi"
        case administrativeRegion = "administrative_region"
        case stopArea = "stop_area"
        case address = "address"
    }
    var q:String? = nil
    var lat:Double? = nil
    var lon:Double? = nil
    var type: [String]? = nil
    var count:Int32? = nil
    var adminUri:[String]? = nil
    var depth:Int32? = nil
    var disableGeojson:Bool? = nil
    var from:String? = nil
    var shape:String? = nil
    var debugURL: String? = nil
    
    public init(currentApi: PlacesApi) {
        self.currentApi = currentApi
    }
    
    open func withQ(_ q: String?) -> CoverageLonLatPlacesRequestBuilder {
        self.q = q
        
        return self
    }
    open func withLat(_ lat: Double?) -> CoverageLonLatPlacesRequestBuilder {
        self.lat = lat
        
        return self
    }
    open func withLon(_ lon: Double?) -> CoverageLonLatPlacesRequestBuilder {
        self.lon = lon
        
        return self
    }
    open func withType(_ type: [ModelType]?) -> CoverageLonLatPlacesRequestBuilder {
        guard let type = type else {
            return self
        }
        
        var items = [String]()
        for item in type {
            items.append(item.rawValue)
        }
        self.type = items
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageLonLatPlacesRequestBuilder {
        self.count = count
        
        return self
    }
    open func withAdminUri(_ adminUri: [String]?) -> CoverageLonLatPlacesRequestBuilder {
        self.adminUri = adminUri
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageLonLatPlacesRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageLonLatPlacesRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }
    open func withFrom(_ from: String?) -> CoverageLonLatPlacesRequestBuilder {
        self.from = from
        
        return self
    }
    open func withShape(_ shape: String?) -> CoverageLonLatPlacesRequestBuilder {
        self.shape = shape
        
        return self
    }
    
    
    
    open func withDebugURL(_ debugURL: String?) -> CoverageLonLatPlacesRequestBuilder {
        self.debugURL = debugURL
        return self
    }
    
    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/places"
        
        if let lat = lat {
            let latPreEscape: String = "\(lat)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }
        
        if let lon = lon {
            let lonPreEscape: String = "\(lon)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }
        
        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)
        
        let paramValues: [String: Any?] = [
            "q": self.q!,
            "type[]": self.type,
            "count": self.count?.encodeToJSON(),
            "admin_uri[]": self.adminUri,
            "depth": self.depth?.encodeToJSON(),
            "disable_geojson": self.disableGeojson,
            "from": self.from,
            "shape": self.shape
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")
        
        return (debugURL ?? url?.string ?? URLString)
    }
    
    open func get(completion: @escaping ((_ data: Places?,_ error: Error?) -> Void)) {
        if (self.q == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : q"])))
        }
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        
        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Places>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
        }
    }
    
    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        if (self.q == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : q"])))
        }
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        
        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseString{ (response: (DataResponse<String>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
        }
    }
}

open class CoverageRegionPlacesRequestBuilder: NSObject {
    let currentApi: PlacesApi
    
    /**
     * enum for parameter type
     */
    public enum ModelType: String {
        case stopPoint = "stop_point"
        case poi = "poi"
        case administrativeRegion = "administrative_region"
        case stopArea = "stop_area"
        case address = "address"
    }
    var q:String? = nil
    var region:String? = nil
    var type: [String]? = nil
    var count:Int32? = nil
    var adminUri:[String]? = nil
    var depth:Int32? = nil
    var disableGeojson:Bool? = nil
    var from:String? = nil
    var shape:String? = nil
    var debugURL: String? = nil
    
    public init(currentApi: PlacesApi) {
        self.currentApi = currentApi
    }
    
    open func withQ(_ q: String?) -> CoverageRegionPlacesRequestBuilder {
        self.q = q
        
        return self
    }
    open func withRegion(_ region: String?) -> CoverageRegionPlacesRequestBuilder {
        self.region = region
        
        return self
    }
    open func withType(_ type: [ModelType]?) -> CoverageRegionPlacesRequestBuilder {
        guard let type = type else {
            return self
        }
        
        var items = [String]()
        for item in type {
            items.append(item.rawValue)
        }
        self.type = items
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageRegionPlacesRequestBuilder {
        self.count = count
        
        return self
    }
    open func withAdminUri(_ adminUri: [String]?) -> CoverageRegionPlacesRequestBuilder {
        self.adminUri = adminUri
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageRegionPlacesRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> CoverageRegionPlacesRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }
    open func withFrom(_ from: String?) -> CoverageRegionPlacesRequestBuilder {
        self.from = from
        
        return self
    }
    open func withShape(_ shape: String?) -> CoverageRegionPlacesRequestBuilder {
        self.shape = shape
        
        return self
    }
    
    
    
    open func withDebugURL(_ debugURL: String?) -> CoverageRegionPlacesRequestBuilder {
        self.debugURL = debugURL
        return self
    }
    
    open func makeUrl() -> String {
        var path = "/coverage/{region}/places"
        
        if let region = region {
            let regionPreEscape: String = "\(region)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }
        
        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)
        
        let paramValues: [String: Any?] = [
            "q": self.q!,
            "type[]": self.type,
            "count": self.count?.encodeToJSON(),
            "admin_uri[]": self.adminUri,
            "depth": self.depth?.encodeToJSON(),
            "disable_geojson": self.disableGeojson,
            "from": self.from,
            "shape": self.shape
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")
        
        return (debugURL ?? url?.string ?? URLString)
    }
    
    open func get(completion: @escaping ((_ data: Places?,_ error: Error?) -> Void)) {
        if (self.q == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : q"])))
        }
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        
        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Places>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
        }
    }
    
    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        if (self.q == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : q"])))
        }
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        
        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseString{ (response: (DataResponse<String>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
        }
    }
}

open class PlacesRequestBuilder: NSObject {
    let currentApi: PlacesApi
    
    /**
     * enum for parameter type
     */
    public enum ModelType: String {
        case stopPoint = "stop_point"
        case poi = "poi"
        case administrativeRegion = "administrative_region"
        case stopArea = "stop_area"
        case address = "address"
    }
    var q:String? = nil
    var type: [String]? = nil
    var count:Int32? = nil
    var adminUri:[String]? = nil
    var depth:Int32? = nil
    var disableGeojson:Bool? = nil
    var from:String? = nil
    var shape:String? = nil
    var debugURL: String? = nil
    
    public init(currentApi: PlacesApi) {
        self.currentApi = currentApi
    }
    
    open func withQ(_ q: String?) -> PlacesRequestBuilder {
        self.q = q
        
        return self
    }
    open func withType(_ type: [ModelType]?) -> PlacesRequestBuilder {
        guard let type = type else {
            return self
        }
        
        var items = [String]()
        for item in type {
            items.append(item.rawValue)
        }
        self.type = items
        
        return self
    }
    open func withCount(_ count: Int32?) -> PlacesRequestBuilder {
        self.count = count
        
        return self
    }
    open func withAdminUri(_ adminUri: [String]?) -> PlacesRequestBuilder {
        self.adminUri = adminUri
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> PlacesRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool?) -> PlacesRequestBuilder {
        self.disableGeojson = disableGeojson
        
        return self
    }
    open func withFrom(_ from: String?) -> PlacesRequestBuilder {
        self.from = from
        
        return self
    }
    open func withShape(_ shape: String?) -> PlacesRequestBuilder {
        self.shape = shape
        
        return self
    }
    
    
    
    open func withDebugURL(_ debugURL: String?) -> PlacesRequestBuilder {
        self.debugURL = debugURL
        return self
    }
    
    open func makeUrl() -> String {
        let path = "/places"
        
        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)
        
        let paramValues: [String: Any?] = [
            "q": self.q!,
            "type[]": self.type,
            "count": self.count?.encodeToJSON(),
            "admin_uri[]": self.adminUri,
            "depth": self.depth?.encodeToJSON(),
            "disable_geojson": self.disableGeojson,
            "from": self.from,
            "shape": self.shape
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")
        
        return (debugURL ?? url?.string ?? URLString)
    }
    
    open func get(completion: @escaping ((_ data: Places?,_ error: Error?) -> Void)) {
        if (self.q == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : q"])))
        }
        
        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Places>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
        }
    }
    
    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        if (self.q == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : q"])))
        }
        
        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseString{ (response: (DataResponse<String>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
        }
    }
}



open class PlacesApi: APIBase {
    let token: String
    
    public init(token: String) {
        self.token = token
    }
    
    public func newCoverageLonLatPlacesRequestBuilder() -> CoverageLonLatPlacesRequestBuilder {
        return CoverageLonLatPlacesRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionPlacesRequestBuilder() -> CoverageRegionPlacesRequestBuilder {
        return CoverageRegionPlacesRequestBuilder(currentApi: self)
    }
    public func newPlacesRequestBuilder() -> PlacesRequestBuilder {
        return PlacesRequestBuilder(currentApi: self)
    }
}
